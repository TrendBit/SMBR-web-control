<div id="KineticFluorometer-Widget" class="widget handler" handler-id="FluoroMeterHandler">
    <div class="header">
        <h1>Kinetic fluorometer</h1>
        <div class="right">
            <% if(DashboardPanel.KineticFluorometerWidget.header) DashboardPanel.KineticFluorometerWidget.header.rows.forEach(element => { %>
                <div>
                    <p><%= element.name %></p>
                    <p class="table-dataField api-fetcher"
                        port="<% if(element.port){%><%=element.port%><%}else{%><%="8089"%><%} %>"
                        unit="<% if(element.unit){%><%=element.unit%><%}else{%><%="Â°C"%><%} %>"
                        resource="<%= element.resource %>"
                        component="<%= element.component %>"
                    ></p>
                </div>
                <% }); %>

                <button class="reset_button button1 hoverSpin" onclick="getHandlerObj(this,'FluoroMeterHandler').fetchData(this,true)">
                    <img src="<%= getIcon("refresh") %>" alt="refresh" title="refresh">
                </button>
        </div>
        <div class="top">
            <p>ERROR</p>
        </div>
    </div>
    <div class="apiChart">
        <div>
            <canvas 
            id="KineticFluorometer-Widget-Chart" 
            class="KineticFluorometer-Widget-Chart" 
            chartIndex="<%= currNumOfCharts++ %>"
            resource="<%= DashboardPanel.KineticFluorometerWidget.chart.resource %>"
            port="<%= DashboardPanel.KineticFluorometerWidget.chart.port %>"
            ></canvas>
        </div>
        <p>use [shift] and scroll wheel to zoom </p>
    </div>
    <div class="widget horizontal KineticFluorometer-controlPanel" >
        <div class="KineticFluorometer-testInfo">
            <div class="widget tabs-container">
              <script>
                function KineticFluorometer_changeTab(element){
                  const container = element.parentElement.parentElement;
                  const heads = container.getElementsByClassName("head")[0].children;
                  const bodies = container.getElementsByClassName("bodies")[0].children;
                  for (let i = 0; i < bodies.length; i++) {
                    bodies[i].style.display = "none";                   
                  }
                  for (let i = 0; i < heads.length; i++) {
                    heads[i].classList.remove("active");                   
                  }
                  element.classList.add("active");   
                  bodies[element.getAttribute("tabindex")].style.display = "flex"; 
                }
              </script>
                <div class="head">
                  <button onclick="//KineticFluorometer_changeTab(this)" tabindex="0" class="button1 active"><h2  >current</h2></button> 
                  <!--<button onclick="KineticFluorometer_changeTab(this)" tabindex="1"  class="button1" ><h2>previous</h2></button>-->
                </div>
                <div class="bodies">
                  <table class="KineticFluorometer-testInfo-current">
                      <tbody>
                          <tr>
                              <td class="table-name">samples         </td>
                              <td class="table-dataField">1000</td>
                          </tr>
                          <tr>
                              <td class="table-name">sampling_time   </td>
                              <td class="table-dataField">logarithmic</td>
                          </tr>
                          <tr>
                              <td class="table-name">captured_length </td>
                              <td class="table-dataField">2.0</td>
                          </tr>
                          <tr>
                              <td class="table-name">emitor_intensity</td>
                              <td class="table-dataField">1.0</td>
                          </tr>
                          <tr>
                              <td class="table-name">detector_gain   </td>
                              <td class="table-dataField">10.0</td>
                          </tr>
                      </tbody>
                  </table>
                  <table style="display: none;" class="KineticFluorometer-testInfo-previous">
                    <tbody>
                        <tr>
                            <td class="table-name">samples         </td>
                            <td class="table-dataField">1000</td>
                        </tr>
                        <tr>
                            <td class="table-name">sampling_time   </td>
                            <td class="table-dataField">linear</td>
                        </tr>
                        <tr>
                            <td class="table-name">captured_length </td>
                            <td class="table-dataField">4.0</td>
                        </tr>
                        <tr>
                            <td class="table-name">emitor_intensity</td>
                            <td class="table-dataField">2.0</td>
                        </tr>
                        <tr>
                            <td class="table-name">detector_gain   </td>
                            <td class="table-dataField">20.0</td>
                        </tr>
                    </tbody>
                  </table>
                </div>
            </div>
        </div>
        <div class="widget KineticFluorometer-Widget-NewTest">
            <h2>New test</h2>
            <div>
                <h3>Length</h3>
                <div class="slider2">
                    <input class="slider" 
                    type="range" 
                    min=0.1 
                    max="4" 
                    step="0.1"
                    oninput="slider2Handler(this)">
                    <div class="button2container slider2-inputLabel">
                        <input class="button2 left KineticFluorometer-Widget-NewTest-length"  type="text" min=0.1 max="4" placeholder="0.1-4" onblur="enforceMin(this)" onkeyup="enforceMax(this); slider2TextInputHandler(this)"> 
                        <p     class="button2 right disabled" >s</p>
                    </div>
                </div>
            </div>
            <div>
                <h3>Intensity</h3>
                <div class="slider2">
                    <input class="slider" 
                    type="range" 
                    min="10" 
                    max="100" 
                    step="1"
                    oninput="slider2Handler(this)">
                    <div class="button2container slider2-inputLabel">
                        <input class="button2 left KineticFluorometer-Widget-NewTest-intensity"  type="text" min=10 max="100" placeholder="10-100" onblur="enforceMin(this)" onkeyup="enforceMax(this); slider2TextInputHandler(this)"> 
                        <p     class="button2 right disabled" >%</p>
                    </div>
                </div>
            </div>
            <div> 
                <h3>Gain</h3>
                <div class="horflex KineticFluorometer-NewTest-gain" >
                    <div class="radio1"> 
                        <input  name="KineticFluorometer-NewTest-gain" type="radio" value="1"> 
                        <label for="KineticFluorometer-gain-1" >1 </label>   
                    </div>
                    <div class="radio1"> 
                        <input checked="checked" name="KineticFluorometer-NewTest-gain" type="radio" value="10"> 
                        <label for="KineticFluorometer-gain-10">10</label>  
                    </div>
                    <div class="radio1"> 
                        <input name="KineticFluorometer-NewTest-gain" type="radio" value="50"> 
                        <label for="KineticFluorometer-gain-50">50</label>  
                    </div>                    
                </div>
            </div>
    
            <button 
            class="button1 loadingBarBackground KineticFluorometer-NewTest-startBtn" 
            onclick="getHandlerObj(this,'FluoroMeterHandler').startNewTest()" 
            resource="<%= DashboardPanel.KineticFluorometerWidget.newTest.resource %>"
            port="<%= DashboardPanel.KineticFluorometerWidget.newTest.port %>"
            >
                <p>Start a new test</p>
            </button>
        </div>
    </div>
    
    <script>
        async function fetchNewFluoroCurve(element){
            if(element){
                element.disabled = true;
                setTimeout(() => {
                    element.disabled = false;
                },4000);
            }

            const chartElement = document.getElementById("KineticFluorometer-Widget-Chart")
            const chartIndex = chartElement.getAttribute("chartIndex");
            const chart = chartArray[chartIndex];

            const data = await fetchDataAsJson(":80/fluoro-curve");

            console.warn("loading curve data: ",data);
            
            currTS = data.current.timestamps;
            prevTS = data.previous.timestamps;
            mergTS = [];
            currHigh = currTS[0] > prevTS[0];
            currI = 0;
            prevI = 0;
            last = -1;
            

            //merges two sorted arrays
            for (let i = 0; i < currTS.length+prevTS.length; i++) {//max possible iterations is in an alternating pattern
                if(currI==currTS.length){
                    for (let i = prevI; i < prevTS.length; i++) {
                        if(last != prevTS[i]){
                            mergTS.push(prevTS[i]);
                            last = prevTS[i];
                        }
                    }
                    break;
                }
                if(prevI==prevTS.length){
                    for (let i = currI; i < currTS.length; i++) {
                        if(last != currTS[i]){
                            mergTS.push(currTS[i]);
                            last = currTS[i];
                        }
                    }
                    break;
                }
                
                if(currHigh){
                    if(currTS[currI] < prevTS[prevI]){
                        mergTS.push(prevTS[prevI++]);
                        
                        currHigh = 0;
                        continue;
                    }
                    if(currTS[currI] == prevTS[prevI]){
                        prevI++;
                    }
                    mergTS.push(currTS[currI++]);
                    continue;                  
                }else{
                    if(currTS[currI] > prevTS[prevI]){
                        mergTS.push(currTS[currI++]);
                        currHigh = 1;
                        continue;
                    }
                    if(currTS[currI] == prevTS[prevI]){
                        currI++;
                    }
                    mergTS.push(prevTS[prevI++]);
                    continue;  
                }         
            }

            console.warn("SORTED ARRAY",mergTS);



            chart.data.labels = mergTS;
            chart.options.plugins.zoom.limits.x.max = mergTS[mergTS.length-1];
            chart.options.plugins.zoom.limits.x.min = mergTS[0];
            
            chart.data.datasets[0].data = data.current.detector.map(function (value, index) {
                return {x:data.current.timestamps[index], y:value}
            });
            chart.data.datasets[1].data = data.previous.detector.map(function (value, index) {
                return {x:data.previous.timestamps[index], y:value}
            });
            console.warn("done: ",chart.data);

            chart.update();


            if(element){
                element.disabled = false;
            }
        }

        onloadQueue.push(() => {
            const chart = document.getElementById("KineticFluorometer-Widget-Chart")
            const chartIndex = chart.getAttribute("chartIndex");
            
            console.log("Iitializing a new chart\nindex: ",chartIndex);
            const data = {
                labels: [],
                datasets: [
                {
                    label: "absolute",
                    data: [],
                    fill: false,
                    cubicInterpolationMode: 'monotone',
                    tension: 0.5,
                },
                {
                    label: "relative",
                    data: [],
                    fill: false,
                    cubicInterpolationMode: 'monotone',
                    tension: 0.5,
                },
                {
                    label: "raw",
                    data: [],
                    fill: false,
                    cubicInterpolationMode: 'monotone',
                    tension: 0,
                    hidden: true,
                }
                ]
            };

            console.log("data: ",data)
            chartArray[chartIndex] = new Chart(chart, {
                type: 'line',
                data: data,
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    animations: false,
                    elements: {
                        point:{
                            radius: 1
                        }
                    },
                    interaction:{
                        mode: "nearest",
                        axis: "xy",
                        intersect: false
                    },
                    plugins:{
                        legend:{
                            display: true,
                            position: "bottom"
                        },
                        zoom: {
                            zoom: {
                                mode: 'x',
                                wheel: {
                                    enabled: true,
                                    modifierKey: "shift",
                                },
                                pinch: {
                                    enabled: true,
                                },
                            },
                            limits: {
                                x: {min: 0, max: 100}
                            }
                        },
                        tooltip: {
                            callbacks: {
                                title: (item) => {
                                    return item[0].label + ' Âµs';
                                }
                            },
                        },
                    },
                    
                    scales: {
                        x: {
                            display: true,
                            grid:{
                                color: "rgb(50,50,50)"
                            },
                            type: 'logarithmic',
                            ticks: {
                                fontSize: 40,
                                callback: function (value) {
                                    value = Math.round(value);
                                    var out = value + 'Âµs';
                                    if (value>=1000){
                                        out = (value/1000) + 'ms';
                                    }
                                    if (value>=1000000){
                                        out = (value/1000000) + 's';
                                    }
                                    return out;
                                },
                                
                            }
                        },
                        y: {
                            display: true,
                            grid:{
                                color: "rgb(50,50,50)"
                            },
                            suggestedMin: 0,
                            suggestedMax: 1
                        }
                    },
                    grid: {
                        color: "red"
                    }
                },
            });
            //fetchNewFluoroCurve(null);
            getHandlerObj(chart,'FluoroMeterHandler').connectChart(chartArray[chartIndex]);
        });

        handlers["FluoroMeterHandler"] = class FluoroMeterHandler {
            constructor(element) {
                console.log("CREATING FluoroMeterHandler")

                this.element = element;
                this.chart = {
                    obj:null,
                    element:element.getElementsByClassName("KineticFluorometer-Widget-Chart")[0]
                }

                this.info = {
                    element:element.getElementsByClassName("KineticFluorometer-testInfo")[0],
                    current:{
                        element:element.getElementsByClassName("KineticFluorometer-testInfo-current")[0].children[0]
                    },
                    previous:{
                        element:element.getElementsByClassName("KineticFluorometer-testInfo-previous")[0].children[0]
                    }
                }

                this.newTest= {
                    length:element.getElementsByClassName("KineticFluorometer-Widget-NewTest-length")[0],
                    intensity:element.getElementsByClassName("KineticFluorometer-Widget-NewTest-intensity")[0],
                    gain:element.getElementsByClassName("KineticFluorometer-NewTest-gain")[0],
                    startButton:element.getElementsByClassName("KineticFluorometer-NewTest-startBtn")[0]
                }

                this.currentDataID = 0;

                console.log(this)
            }

            connectChart(chartObj){
                this.chart.obj = chartObj;
                this.fetchData();
            }

            loadData(data){
                this.info.current.element.innerHTML = "";
                for(var field in data){
                    if(field != "samples"){
                        this.info.current.element.innerHTML += "<tr><td class=\"table-name\">"+field+"</td><td class=\"table-dataField\">"+data[field]+"</td></tr>"
                    }
                }
                const samples = data.samples;
                const timestamps = samples.map(sample => sample.time_ms);
                const raw_values = samples.map(sample => sample.raw_value);
                const relative_values = samples.map(sample => sample.relative_value);
                const absolute_values = samples.map(sample => sample.absolute_value);

                this.chart.obj.data.labels = timestamps*1000;
                this.chart.obj.options.plugins.zoom.limits.x.max = timestamps[timestamps.length-1];
                this.chart.obj.options.plugins.zoom.limits.x.min = timestamps[0];
                
                this.chart.obj.data.datasets[0].data = relative_values.map(function (value, index) {
                    return {x:timestamps[index], y:value}
                });
                this.chart.obj.data.datasets[1].data = absolute_values.map(function (value, index) {
                    return {x:timestamps[index], y:value}
                });
                this.chart.obj.data.datasets[2].data = raw_values.map(function (value, index) {
                    return {x:timestamps[index], y:value}
                });
                console.warn("done: ",this.chart.obj.data);


                /*
                //this part merges the timestamps of current and previous capture
                var currTS = data.current.timestamps;
                var prevTS = data.previous.timestamps;
                var mergTS = [];
                var currHigh = currTS[0] > prevTS[0];
                var currI = 0;
                var prevI = 0;
                var last = -1;
                

                //merges two sorted arrays
                for (let i = 0; i < currTS.length+prevTS.length; i++) {//max possible iterations is in an alternating pattern
                    if(currI==currTS.length){
                        for (let i = prevI; i < prevTS.length; i++) {
                            if(last != prevTS[i]){
                                mergTS.push(prevTS[i]);
                                last = prevTS[i];
                            }
                        }
                        break;
                    }
                    if(prevI==prevTS.length){
                        for (let i = currI; i < currTS.length; i++) {
                            if(last != currTS[i]){
                                mergTS.push(currTS[i]);
                                last = currTS[i];
                            }
                        }
                        break;
                    }
                    
                    if(currHigh){
                        if(currTS[currI] < prevTS[prevI]){
                            mergTS.push(prevTS[prevI++]);
                            
                            currHigh = 0;
                            continue;
                        }
                        if(currTS[currI] == prevTS[prevI]){
                            prevI++;
                        }
                        mergTS.push(currTS[currI++]);
                        continue;                  
                    }else{
                        if(currTS[currI] > prevTS[prevI]){
                            mergTS.push(currTS[currI++]);
                            currHigh = 1;
                            continue;
                        }
                        if(currTS[currI] == prevTS[prevI]){
                            currI++;
                        }
                        mergTS.push(prevTS[prevI++]);
                        continue;  
                    }         
                }


                this.chart.obj.data.labels = mergTS;
                this.chart.obj.options.plugins.zoom.limits.x.max = mergTS[mergTS.length-1];
                this.chart.obj.options.plugins.zoom.limits.x.min = mergTS[0];
                
                this.chart.obj.data.datasets[0].data = data.current.detector.map(function (value, index) {
                    return {x:data.current.timestamps[index], y:value}
                });
                this.chart.obj.data.datasets[1].data = data.previous.detector.map(function (value, index) {
                    return {x:data.previous.timestamps[index], y:value}
                });
                console.warn("done: ",this.chart.obj.data);
                */

                

                this.chart.obj.update();
            }

            async fetchData(element, forced = false){
                if(element!=undefined){
                    element.disabled = true;
                    setTimeout(() => {
                        element.disabled = false;
                    },4000);
                }
                var data;
                try {
                    data = await fetchDataAsJson(":" + this.chart.element.getAttribute("port") + this.chart.element.getAttribute("resource"));
                } catch (error) {
                    console.error("FluoroMeterHandler: Cannot fetch new data error: \n",error);
                    return;
                }
                if(data.measurement_id != this.currentDataID || forced){
                    this.currentDataID = data.measurement_id;
                    this.loadData(data);
                }
                if(element!=undefined){
                    element.disabled = false;
                }
            }

            async startNewTest(){
                const length = Number(this.newTest.length.value);
                const intensity = Number(this.newTest.intensity.value);
                var gain = "";
                for (let i = 0; i < this.newTest.gain.children.length; i++) {
                    const element = this.newTest.gain.children[i].children[0];
                    if(element.checked == true){
                        gain = Number(element.value);
                    }
                }
                if(length=="" || intensity == "" || gain =="" ){
                    return
                }

                const data = {
                    "detector_gain": gain,
                    "emitor_intensity": intensity,
                    "timebase": "logarithmic",
                    "length_ms": length*1000,
                    "sample_count": 1000
                }

                const timeout = length*3;
                
                this.newTest.startButton.disabled = true;
                this.newTest.startButton.style.animation= "loadingBarBackground "+timeout+"s linear"
                
                setTimeout(() => {
                    this.newTest.startButton.disabled = false;
                    this.newTest.startButton.style.animation= "";                    
                },timeout*1000)

                var response;
                try {
                    response = await sendData(":" + this.newTest.startButton.getAttribute("port") + this.newTest.startButton.getAttribute("resource"),JSON.stringify(data));
                }catch(err){
                    console.error("FluoroMeterHandler: cannot start a new capture: ",err);
                    this.newTest.startButton.disabled = false;
                    this.newTest.startButton.style.animation= "";  
                }
                if(response.status != 200){
                    this.newTest.startButton.disabled = false;
                    this.newTest.startButton.style.animation= "";  
                }else{
                    const responseData = await response.json();
                    this.loadData(responseData);
                }
            }
        }


    </script>

</div>