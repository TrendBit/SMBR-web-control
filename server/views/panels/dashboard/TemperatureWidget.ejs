<div id="Temperature-Widget" class="widget ">
    <div class="header">
        <h1>Temperature</h1>
        <div class="right">
            <% if(DashboardPanel.TemperatureWidget.header) DashboardPanel.TemperatureWidget.header.rows.forEach(element => { %>
                <div>
                    <p><%= element.name %></p>
                    <p class="table-dataField api-fetcher"
                        port="<% if(element.port){%><%=element.port%><%}else{%><%="8089"%><%} %>" 
                        unit="<% if(element.unit){%><%=element.unit%><%}else{%><%="°C"%><%} %>" 
                        resource="<%= element.resource %>" 
                        component="<%= element.component %>"
                    ></p>
                </div>
            <% }); %>
            <button class="reset_button button1 hoverSpin" onclick="apiUpdateWorkerUpdate(this.parentNode.parentNode.parentNode)">
                <img src="<%= getIcon("refresh") %>" alt="refresh" title="refresh">
            </button>
        </div>
        <div class="top">
            <p>ERROR</p>
        </div>
    </div>


    <table class="table-widget-segment">
        <thead>
            <tr>
                <th>color</th>
                <th>name</th>
                <th>current</th>
                <th>target</th>
                <th>reset</th>
            </tr>
        </thead>
        <tbody id="Temperature-Widget-Table">
            <% var i=-1; %>
            <% DashboardPanel.TemperatureWidget.rows.forEach(element => { %>
                <tr class="table-master">
                    <td class="table-color">
                        <img src="<%= getIcon(element.icon) %>" alt="<%= element.icon %>">
                        <div class="colorFilter" colorFilter="<%= getColor(++i) %>"></div>
                    </td>

                    <td class="table-name">
                        <%= element.name %>
                    </td>

                    <td class="table-dataField api-fetcher"
                        port="<% if(element.port){%><%=element.port%><%}else{%><%="8089"%><%} %>" 
                        unit="<% if(element.unit){%><%=element.unit%><%}else{%><%="°C"%><%} %>" 
                        resource="<%= element.resource %>" 
                        component="<%= element.component %>"
                        charted="<%= element.charted %>" 
                        decimal-places="<%= element.decimalPlaces %>"
                    >
                    </td>
                    
                    <td class="table-target">
                        <% if(element.input) {%> 
                            <div class="button2container">
                                <input 
                                    type='text' 
                                    onblur="enforceMin(this);" 
                                    onkeyup="enforceMax(this);" 
                                    class="button2 left api-fetcher" 
                                    min="<%= element.input.min %>" 
                                    max="<%= element.input.max %>" 
                                    placeholder="null"
                                    <% if(element.input.reciever){ const reciever = element.input.reciever%>
                                        port="<% if(reciever.port){%><%=reciever.port%><%}else{%><%="8089"%><%} %>"
                                        unit="<% if(reciever.unit){%><%=reciever.unit%><%}else{%><%=""%><%} %>" 
                                        resource="<%= reciever.resource %>" 
                                        component="<%= reciever.component %>"
                                        decimal-places="<%= reciever.decimalPlaces %>"
                                        to-placeholder="true"
                                    <% } %>
                                    > 
                                
                                <input 
                                    type="button" 
                                    onclick="button2Handler(this,placeholderReset=true);" 
                                    class="button2 right" 
                                    value=">"
                                    port="<% if(element.input.port){%><%=element.input.port%><%}else{%><%="8089"%><%} %>"
                                    unit="<% if(element.input.unit){%><%=element.input.unit%><%}else{%><%=""%><%} %>" 
                                    resource="<%= element.input.resource %>" 
                                    component="<%= element.input.component %>"
                                    decimal-places="<%= element.input.decimalPlaces %>"
                                    component-type="<%= element.input.componentType%>"
                                >
                            </div>
                        <% } %>
                    </td>
                    <td class="table-resettarget">
                        <% if(element.inputReset) {%> 
                            <button 
                                class="button1"
                                port="<% if(element.inputReset.port){%><%=element.inputReset.port%><%}else{%><%="8089"%><%} %>"
                                resource="<%= element.inputReset.resource %>" 
                                onclick="button1Handler(this)"
                            >reset
                            </button>
                        <% } %>
                    </td>
                </tr>

                <% if(element.sub_rows){numOfSubRows=element.sub_rows.length; for( let u = 0; u < numOfSubRows; u++ ) { let sub_element = element.sub_rows[u];%>
                    <tr class="table-sub">
                        <td class="table-color">
                            <img src="<% if((u+1)<numOfSubRows){%><%=getIcon("subElement")%><%}else{%><%=getIcon("subElement-last")%><%} %>" alt="sub_element">
                            <div class="colorFilter" colorFilter="<%= getSubColor(i,u+1) %>"></div>
                        </td>

                        <td class="table-name">
                            <%= sub_element.name %>
                        </td>

                        <td class="table-current api-fetcher"
                            port="<% if(sub_element.port){%><%=sub_element.port%><%}else{%><%="8089"%><%} %>" 
                            unit="<% if(sub_element.unit){%><%=sub_element.unit%><%}else{%><%="°C"%><%} %>" 
                            resource="<%= sub_element.resource %>" 
                            component="<%= sub_element.component %>"
                            charted="<% if(element.charted){%><%=element.charted%><%}else{%><%="false"%><%} %>" 
                            parent="<%=element.name%>"
                            decimal-places="<%= element.decimalPlaces %>"
                        >
                        </td>
                        
                        <td class="table-target">
                            <% if(sub_element.input) {%> 
                                <div class="button2container">
                                    <input 
                                        type='text' 
                                        onblur="enforceMin(this)" 
                                        onkeyup="enforceMax(this)" 
                                        class="button2 left api-fetcher" 
                                        min="<%= sub_element.input.min %>" 
                                        max="<%= sub_element.input.max %>" 
                                        placeholder="null"
                                        <% if(sub_element.input.reciever){ const reciever = sub_element.input.reciever%>
                                            port="<% if(reciever.port){%><%=reciever.port%><%}else{%><%="8089"%><%} %>"
                                            unit="<% if(reciever.unit){%><%=reciever.unit%><%}else{%><%=""%><%} %>" 
                                            resource="<%= reciever.resource %>" 
                                            component="<%= reciever.component %>"
                                            decimal-places="<%= reciever.decimalPlaces %>"
                                            to-placeholder="true"
                                        <% } %>
                                        > 
                                    
                                    <input 
                                        type="button" 
                                        onclick="button2Handler(this,placeholderReset=true)" 
                                        class="button2 right" 
                                        value=">"
                                        port="<% if(sub_element.input.port){%><%=sub_element.input.port%><%}else{%><%="8089"%><%} %>"
                                        unit="<% if(sub_element.input.unit){%><%=sub_element.input.unit%><%}else{%><%=""%><%} %>" 
                                        resource="<%= sub_elesub_element.inputment.resource %>" 
                                        component="<%= sub_element.input.component %>"
                                        decimal-places="<%= sub_element.input.decimalPlaces %>"
                                        component-type="<%= sub_element.input.componentType%>"
                                    >
                                </div>
                            <% } %>
                        </td>
                    </tr>
                <% }} %>

            <% }); %>
        </tbody>
    </table>
    <div class="horflex" id="Temperature-Widget-Chart-ContextLen">
        <div class="radio1 minimal"> 
            <input checked="checked" id="Temperature-Widget-Chart-ContextLen-1"  name="Temperature-Widget-Chart-ContextLen" type="radio" value="minute" onclick="TemperatureWidgetChart_Reload(this)"> 
            <label for="Temperature-Widget-Chart-ContextLen-1" >minute</label>   
        </div>     
        <div class="radio1 minimal"> 
            <input id="Temperature-Widget-Chart-ContextLen-2"  name="Temperature-Widget-Chart-ContextLen" type="radio" value="hour" onclick="TemperatureWidgetChart_Reload(this)"> 
            <label for="Temperature-Widget-Chart-ContextLen-2" >hour</label>   
        </div>     
        <div class="radio1 minimal"> 
            <input id="Temperature-Widget-Chart-ContextLen-3"  name="Temperature-Widget-Chart-ContextLen" type="radio" value="day" onclick="TemperatureWidgetChart_Reload(this)"> 
            <label for="Temperature-Widget-Chart-ContextLen-3" >day</label>   
        </div>     
    </div>
    <div class="apiChart">
        <div>
            <canvas id="Temperature-Widget-Chart" chartIndex="<%= currNumOfCharts++ %>" history="<%= DashboardPanel.TemperatureWidget.chart.history %>"></canvas>
        </div>
    </div>
    
    <script>


        async function TemperatureWidgetChart_Reload(radioButton){
            const chart = document.getElementById("Temperature-Widget-Chart");
            const chartIndex = chart.getAttribute("chartIndex");
            const currRadio = radioButton.value;
            TemperatureWidgetChart_CurrentRadioButton = currRadio;
            
            const newData = await fetchDataAsJson(":80/temperature-graph",{"logging-level":currRadio})

            const chartObj = chartArray[chartIndex];
            
            var dataOffset = 0;
            var newLabels = new Array(newData.length);
            for (let i = 0; i < newData.length; i++) {
                if(newData[i].timestamp!=0){
                    const currTimestamp = new Date(newData[i].timestamp);

                    if(currRadio == "day"){
                        newLabels[i] = formatTime("dd.mo hh h",currTimestamp);
                    }
                    if(currRadio == "hour"){
                        newLabels[i] = formatTime("HH:MM",currTimestamp);
                    }
                    if(currRadio == "minute"){
                        newLabels[i] = formatTime("HH:MM:SS",currTimestamp);
                    }
                }else{
                    newLabels[i] = " ";
                }
            }
            chartObj.data.labels = newLabels;
            
            for (let d = 0; d < chartObj.data.datasets.length; d++) {
                const dataset = chartObj.data.datasets[d];

                
                dataset.data = new Array(newData.length);
                for (let i = 0; i < newData.length; i++) {

                    if(newData.data === 0){
                        dataset.data[i] = null;
                    }else{
                        dataset.data[i] = newData[i].data[dataset.label];
                    }
                    
                }
            }

            TemperatureWidgetChart_LastReload = newData[newData.length-1].timestamp;

            chartArray[chartIndex].update();
        }

        var TemperatureWidgetChart_LastReload = 0;
        var TemperatureWidgetChart_CurrentRadioButton = "";
        setInterval(async () => { //updater
            const chart = document.getElementById("Temperature-Widget-Chart");
            const chartIndex = chart.getAttribute("chartIndex");
            const currRadio = TemperatureWidgetChart_CurrentRadioButton;
            const chartObj = chartArray[chartIndex];
            //console.warn("getting lastReload:",TemperatureWidgetChart_LastReload,"logging level:",currRadio)
            const newData = await fetchDataAsJson(":80/temperature-graph-recent",{
                "logging-level":currRadio,
                "last-reload":TemperatureWidgetChart_LastReload+10
            });
            if(newData.length!=0){
                TemperatureWidgetChart_LastReload = newData[0].timestamp;

                for (let i = 0; i < chartObj.data.labels.length-newData.length; i++) {
                    chartObj.data.labels[i] = chartObj.data.labels[i+newData.length];

                    for (let d = 0; d < chartObj.data.datasets.length; d++) {
                        const dataset = chartObj.data.datasets[d];

                        dataset.data[i] = dataset.data[i+newData.length];
                    }
                }
                
                for (let i = 0; i < newData.length; i++) {
                    const index = chartObj.data.labels.length-i-1;


                    const currTimestamp = new Date(newData[i].timestamp);
                    var newTimeStamp = "";




                    if(currRadio == "day"){
                        newTimeStamp = formatTime("dd.mo hh h",currTimestamp);
                    }
                    if(currRadio == "hour"){
                        newTimeStamp = formatTime("HH:MM",currTimestamp);
                    }
                    if(currRadio == "minute"){
                        newTimeStamp = formatTime("HH:MM:SS",currTimestamp);
                    }


                    chartObj.data.labels[index] = newTimeStamp;



                    for (let d = 0; d < chartObj.data.datasets.length; d++) {
                        const dataset = chartObj.data.datasets[d];

                        dataset.data[index] = newData[i].data[dataset.label];
                    }
                }





                chartArray[chartIndex].update();

            }
        
        },1000);
        onloadQueue.push(() => {
            const chart = document.getElementById("Temperature-Widget-Chart");
            const chartIndex = chart.getAttribute("chartIndex");
            const possibleApiFetchers = document.getElementById("Temperature-Widget-Table").getElementsByClassName("api-fetcher");
            var colorFilters = [];
            var apiFetchers = [];
            for(let i = 0; i< possibleApiFetchers.length; i++){
                if(possibleApiFetchers[i].getAttribute("charted") == "true"){
                    apiFetchers.push(possibleApiFetchers[i]);
                    colorFilters.push(possibleApiFetchers[i].parentElement.getElementsByClassName("colorFilter")[0]);
                }
            }
            
            const radioButtons = document.getElementsByName("Temperature-Widget-Chart-ContextLen");
            for (let i = 0; i < radioButtons.length; i++) {
                const radio = radioButtons[i];
                if(radio.checked){
                    TemperatureWidgetChart_Reload(radio);
                    break;
                }
                
            }

            console.log("Iitializing a new chart\nindex: ",chartIndex,"\nhistory:",chart.getAttribute("history"),"\napiFetchers:",apiFetchers, "\ncolorFilters:",colorFilters);
            chartArray[chartIndex] = ( new Chart(
                chart,
                {
                    type: 'line',
                    data: {
                        labels: getCountdownArray(chart.getAttribute("history")),
                        datasets: getEmptyDatasets(apiFetchers.length),
                    },
                    options: {
                        maintainAspectRatio: false,
                        responsive: true,
                        animations: false,
                        elements: {
                            point:{
                                radius: 1
                            }
                        },
                        interaction:{
                            mode: "nearest",
                            axis: "xy",
                            intersect: false
                        },
                        plugins:{
                            legend:{
                                display: false
                            }
                        },
                        scales: {
                            x: {
                                display: true,
                                ticks: {
                                    display: true
                                },
                                grid:{
                                    color: "rgb(50,50,50)"
                                }
                            },
                            y: {
                                display: true,
                                suggestedMax: 40,
                                suggestedMin: 10,
                                grid:{
                                    color: "rgb(50,50,50)"
                                }
                            }
                        },
                        grid: {
                            color: "red"
                        }
                    }
                }
            ) );
            chartArray[chartIndex].apiFetchers= apiFetchers;    
            chartArray[chartIndex].count = 0; 

            

            var i = 0;
            chartArray[chartIndex].apiFetchers.forEach(element => {
                const targetColorFilter = colorFilters[i];
                
                const dataSet = chartArray[chartIndex].data.datasets[i++];
                const targetColor = targetColorFilter.getAttribute("colorFilter");

                element.dataSet = dataSet;
                element.chart = chart;

                dataSet.borderColor     = targetColor;
                dataSet.backgroundColor = darkenHexColor(targetColor,30);
                
                var label = element.parentElement.getElementsByClassName("table-name")[0].innerHTML.trim();
                if(element.getAttribute("parent")){
                    label = element.getAttribute("parent") + "." + label;
                }

                const splitLabel = label.split(' ');
                dataSet.label = "";
                for (let i = 0; i < splitLabel.length; i++) {
                    const element = splitLabel[i];
                    if(element[0] == '<'){
                        break;
                    }
                    dataSet.label += element;
                }     
                dataSet.label = dataSet.label.trim();         
                
                console.log("new dataset borderColor:",dataSet.borderColor,
                            ", backgroundColor:",dataSet.backgroundColor,
                            ", label:",dataSet.label);
            });    
        });
             

    </script>
</div>