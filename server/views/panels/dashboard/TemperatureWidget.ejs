<div id="Temperature-Widget"  update-cost="15" handler-id="TemperatureWidgetChartHandler" class="widget handler api-fetcher">
    <div class="header">
        <h1>Temperature</h1>
        <div class="right">
            <% if(DashboardPanel.TemperatureWidget.header) DashboardPanel.TemperatureWidget.header.rows.forEach(element => { %>
                <div>
                    <p><%= element.name %></p>
                    <p class="table-dataField api-fetcher"
                        port="<% if(element.port){%><%=element.port%><%}else{%><%="8089"%><%} %>" 
                        unit="<% if(element.unit){%><%=element.unit%><%}else{%><%="°C"%><%} %>" 
                        resource="<%= element.resource %>" 
                        component="<%= element.component %>"
                    ></p>
                </div>
            <% }); %>
            <button class="reset_button button1 hoverSpin" onclick="apiUpdateWorkerUpdate(this.parentNode.parentNode.parentNode)">
                <p class="material-icons filled" title="refresh all values">autorenew</p>
            </button>
        </div>
        <div class="popup-container">
</div>
    </div>


    <table class="table-widget-segment">
        <thead>
            <tr>
                <th>color</th>
                <th>name</th>
                <th>current</th>
            </tr>
        </thead>
        <tbody id="Temperature-Widget-Table">
            <% let i=-1; let datasetIndex = 0; %>
            <% DashboardPanel.TemperatureWidget.rows.forEach(element => { %>
                <tr class="table-master">
                    <td class="table-color <%= (element.charted==true)?'charted':'' %> <%= (element.resource==undefined || element.resource=="")?"unchartable":""%>" 
                        <%if (element.resource!=undefined && element.resource!="") {%>
                            onclick="getHandlerObj(this,'TemperatureWidgetChartHandler').toggleDataset(this,'<%= datasetIndex %>');toggleClass(this,'charted');"
                        <%}datasetIndex++;%>
                        >

                        <p class="material-icons filled" style=<%='color:'+getColor(++i)+';'%>>
                            <%= element.icon %>
                        </p>
                    </td>

                    <td class="table-name">
                        <%= element.name %>
                    </td>

                    <td class="table-dataField api-fetcher"
                        port="<% if(element.port){%><%=element.port%><%}else{%><%="8089"%><%} %>" 
                        unit="<% if(element.unit){%><%=element.unit%><%}else{%><%="°C"%><%} %>" 
                        resource="<%= element.resource %>" 
                        component="<%= element.component %>"
                        charted="<%= element.charted %>" 
                        decimal-places="<%= element.decimalPlaces %>"
                    >
                    </td>
                </tr>

                <% if(element.sub_rows){numOfSubRows=element.sub_rows.length; for( let u = 0; u < numOfSubRows; u++ ) { let sub_element = element.sub_rows[u];%>
                    <tr class="table-sub">
                        <td class="table-color <%= (sub_element.charted==true)?'charted':'' %> <%= (sub_element.resource==undefined || sub_element.resource=="")?"unchartable":""%>" 
                            <%if (sub_element.resource!=undefined && sub_element.resource!="") {%>
                                onclick="getHandlerObj(this,'TemperatureWidgetChartHandler').toggleDataset(this,'<%= datasetIndex %>');toggleClass(this,'charted');"
                            <%}datasetIndex++;%>
                            >
                            <%const currIcon = ((u+1)<numOfSubRows)?'┣':'┗';%>
                            <p class="material-icons filled" style=<%='color:'+getSubColor(i,u+1)+';'%>><%= currIcon%></p>
                        </td>

                        <td class="table-name">
                            <%= sub_element.name %>
                        </td>

                        <td class="table-current api-fetcher"
                            port="<% if(sub_element.port){%><%=sub_element.port%><%}else{%><%="8089"%><%} %>" 
                            unit="<% if(sub_element.unit){%><%=sub_element.unit%><%}else{%><%="°C"%><%} %>" 
                            resource="<%= sub_element.resource %>" 
                            component="<%= sub_element.component %>"
                            charted="<% if(sub_element.charted){%><%=sub_element.charted%><%}else{%><%="false"%><%} %>" 
                            parent="<%=element.name%>"
                            decimal-places="<%= sub_element.decimalPlaces %>"
                        >
                        </td>
                    </tr>
                <% }} %>

            <% }); %>
        </tbody>
    </table>
    <div class="container">
        <div class="horflex Temperature-Widget-Chart-ContextLen" id="Temperature-Widget-Chart-ContextLen" >
            <div class="radio1 minimal"> 
                <input checked="checked" id="Temperature-Widget-Chart-ContextLen-1"  name="Temperature-Widget-Chart-ContextLen" type="radio" value="minute" onclick="getHandlerObj(this,'TemperatureWidgetChartHandler').reload(true)"> 
                <label for="Temperature-Widget-Chart-ContextLen-1" >minute</label>   
            </div>     
            <div class="radio1 minimal"> 
                <input id="Temperature-Widget-Chart-ContextLen-2"  name="Temperature-Widget-Chart-ContextLen" type="radio" value="hour" onclick="getHandlerObj(this,'TemperatureWidgetChartHandler').reload(true)"> 
                <label for="Temperature-Widget-Chart-ContextLen-2" >hour</label>   
            </div>     
            <div class="radio1 minimal"> 
                <input id="Temperature-Widget-Chart-ContextLen-3"  name="Temperature-Widget-Chart-ContextLen" type="radio" value="day" onclick="getHandlerObj(this,'TemperatureWidgetChartHandler').reload(true)"> 
                <label for="Temperature-Widget-Chart-ContextLen-3" >day</label>   
            </div>     
        </div>
        <div class="apiChart" >
            <div>
                <canvas class="Temperature-Widget-Chart" history="<%= DashboardPanel.TemperatureWidget.chart.history %>"></canvas>
            </div>
        </div>
    </div>
    
    
    <script>
        handlers["TemperatureWidgetChartHandler"] = class TemperatureWidgetChartHandler {
            constructor(element) {
                console.log("CREATING TemperatureWidgetChartHandler")
                this.chart ={
                    element: element.getElementsByClassName("Temperature-Widget-Chart")[0],
                    index: null,
                    object: null
                } 

                this.chart.object = this.initGraph(this.chart.element);
                this.granuality = 0;
                this.lastID = -1;
                this.radioButtons = element.getElementsByClassName("Temperature-Widget-Chart-ContextLen")[0];
                this.selectedScale = this.radioButtons.querySelector('input:checked').value;

                console.log("TemperatureWidgetChartHandler", this);

                if(updateSwitch){
                    setInterval(()=>{
                    this.softReload();
                },1000);
                }   
                
            }

            async reload(reloadScale = false){
                if(reloadScale){
                    this.selectedScale = this.radioButtons.querySelector('input:checked').value;
                }
                
                const response = await fetchDataAsJson(":80/temperature-graph",{"logging-level":this.selectedScale})
                const newData = response.data;
                const serverTime = Number(response.serverTime);
                this.granuality = Number(response.granuality);

                const chartObj = this.chart.object;
                
                var newLabels = new Array(newData.length);
                var historyOffset = (newData.length-1)*this.granuality;
                for (let i = 0; i < newData.length; i++) {
                    if(newData[i].id!=-1){
                        const currTimestamp = new Date(serverTime - historyOffset);
                        
                        if(this.selectedScale == "day"){
                            newLabels[i] = formatTime("dd.mo hh h",currTimestamp);
                        }
                        if(this.selectedScale == "hour"){
                            newLabels[i] = formatTime("HH:MM",currTimestamp);
                        }
                        if(this.selectedScale == "minute"){
                            newLabels[i] = formatTime("HH:MM:SS",currTimestamp);
                        }
                    }else{
                        newLabels[i] = " ";
                    }
                    this.lastID = newData[i].id;
                    historyOffset-=this.granuality;
                }
                chartObj.data.labels = newLabels;
                
                for (let d = 0; d < chartObj.data.datasets.length; d++) {
                    const dataset = chartObj.data.datasets[d];

                    
                    dataset.data = new Array(newData.length);
                    for (let i = 0; i < newData.length; i++) {

                        if(newData.data === 0){
                            dataset.data[i] = null;
                        }else{
                            dataset.data[i] = newData[i].data[dataset.label];
                        }
                        
                    }
                }
            

                chartObj.update();
            }

            async softReload(){
                if(!updateSwitch) return;
                const currRadio = this.selectedScale;
                const chartObj = this.chart.object;

                const response = await fetchDataAsJson(":80/temperature-graph-recent",{
                    "logging-level":currRadio,
                    "last-reload":this.lastID
                });
                const newData = response.data;
                const serverTime = Number(response.serverTime);
                if(newData.length!=0){
                    this.lastID = newData[newData.length-1].id;

                    for (let i = 0; i < chartObj.data.labels.length-newData.length; i++) {
                        chartObj.data.labels[i] = chartObj.data.labels[i+newData.length];

                        for (let d = 0; d < chartObj.data.datasets.length; d++) {
                            const dataset = chartObj.data.datasets[d];

                            dataset.data[i] = dataset.data[i+newData.length];
                        }
                    }
                    var historyOffset = (newData.length-1)*this.granuality;
                    for (let i = 0; i < newData.length; i++) {
                        const index = chartObj.data.labels.length-i-1;

                        const currTimestamp = new Date(serverTime - historyOffset);
                        var newTimeStamp = "";

                        if(currRadio == "day"){
                            newTimeStamp = formatTime("dd.mo hh h",currTimestamp);
                        }
                        if(currRadio == "hour"){
                            newTimeStamp = formatTime("HH:MM",currTimestamp);
                        }
                        if(currRadio == "minute"){
                            newTimeStamp = formatTime("HH:MM:SS",currTimestamp);
                        }


                        chartObj.data.labels[index] = newTimeStamp;



                        for (let d = 0; d < chartObj.data.datasets.length; d++) {
                            const dataset = chartObj.data.datasets[d];

                            dataset.data[index] = newData[i].data[dataset.label];
                        }
                    }
                    chartObj.update();
                }
            }

            async update(){
                if(!updateSwitch) return;
                this.reload(true);
            }

            initGraph(chart){
                const possibleApiFetchers = document.getElementById("Temperature-Widget-Table").getElementsByClassName("api-fetcher");
                var apiFetchers = [];
                var coloredIcons = [];
                var visibilityMask = [];

                for(let i = 0; i< possibleApiFetchers.length; i++){
                    apiFetchers.push(possibleApiFetchers[i]);
                    coloredIcons.push(possibleApiFetchers[i].parentElement.getElementsByClassName("table-color")[0].children[0]);
                    if(possibleApiFetchers[i].getAttribute("charted") == "true"){
                        visibilityMask.push(true);
                    }else{
                        visibilityMask.push(false);
                    }
                }

                const chartObject = new Chart(chart,
                    {
                        type: 'line',
                        data: {
                            labels: getCountdownArray(chart.getAttribute("history")),
                            datasets: getEmptyDatasets(apiFetchers.length),
                        },
                        options: {
                            maintainAspectRatio: false,
                            responsive: true,
                            animations: false,
                            elements: {
                                point:{
                                    radius: 1
                                }
                            },
                            interaction:{
                                mode: "nearest",
                                axis: "xy",
                                intersect: false
                            },
                            plugins:{
                                legend:{
                                    display: false
                                }
                            },
                            scales: {
                                x: {
                                    display: true,
                                    ticks: {
                                        display: true
                                    },
                                    grid:{
                                        color: "rgb(50,50,50)"
                                    }
                                },
                                y: {
                                    display: true,
                                    suggestedMax: 40,
                                    suggestedMin: 10,
                                    grid:{
                                        color: "rgb(50,50,50)"
                                    }
                                }
                            },
                            grid: {
                                color: "red"
                            }
                        }
                    }
                );
                chartObject.apiFetchers= apiFetchers;    
                chartObject.count = 0; 

                    

                for (let i = 0; i < apiFetchers.length; i++) {
                    const element = apiFetchers[i];
                    
                    const targetColor = coloredIcons[i].style.color;
                    const dataSet = chartObject.data.datasets[i];

                    element.dataSet = dataSet;
                    element.chart = chart;

                    dataSet.borderColor     = targetColor;
                    dataSet.backgroundColor = targetColor;
                    
                    var label = element.parentElement.getElementsByClassName("table-name")[0].innerHTML.trim();
                    if(element.getAttribute("parent")){
                        label = element.getAttribute("parent") + "." + label;
                    }

                    dataSet.label = label;  
                    
                    if(element.getAttribute("charted")=="false"){
                        chartObject.setDatasetVisibility(i,false);          
                    }else{
                        chartObject.setDatasetVisibility(i,true);
                    }
                }

                return chartObject
            }

            toggleDataset(element,rowIndex){       
                const datasets = this.chart.object.data.datasets;   
                this.chart.object.setDatasetVisibility(rowIndex,!element.classList.contains("charted"));          
                this.chart.object.update();
            }
        }
             

    </script>
</div>