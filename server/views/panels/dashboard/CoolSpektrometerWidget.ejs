<div id="CoolSpektrometer-Widget" class="widget handler api-fetcher" update-cost="5" handler-id="SpectrometerHandler">
    <div class="header">
        <h1>Transmissive spectrofotometer</h1>
        <div class="right">
            <% if(DashboardPanel.CoolSpektrometerWidget.header) DashboardPanel.CoolSpektrometerWidget.header.rows.forEach(element => { %>
                <div>
                    <p><%= element.name %></p>
                    <p class="table-dataField api-fetcher"
                        port="<% if(element.port){%><%=element.port%><%}else{%><%="8089"%><%} %>" 
                        unit="<% if(element.unit){%><%=element.unit%><%}else{%><%="Â°C"%><%} %>" 
                        resource="<%= element.resource %>" 
                        component="<%= element.component %>"
                    ></p>
                </div>
                <% }); %>


                
                <button class="reset_button button1 hoverSpin" onclick="apiUpdateWorkerUpdate(this.parentElement.parentElement.parentElement);getHandlerObj(this,'SpectrometerHandler').update();">
                    <p class="material-icons filled" title="refresh all values">autorenew</p>
                </button>
        </div>
        <div class="top">
            <p>ERROR</p>
        </div>
    </div>
    <table class="table-widget-segment">
        <thead>
            <tr>
                <th>color</th>
                <th>frequency</th>
                <th>name</th>
                <th>absolute</th>
                <th>relative</th>
            </tr>
        </thead>
        <tbody id="CoolSpektrometer-Widget-Table">
            <% var i = 0;%>
            <% DashboardPanel.CoolSpektrometerWidget.rows.forEach(element => { %>
                <tr class="table-master">
                    <td class="table-color">
                        <% const channelColor = (element.color)?element.color:getColor(i++);%>
                        <p class="material-icons filled" style=<%='color:'+channelColor%>>circle</p>
                    </td>
                    

                    <td class="table-dataField font_italic">
                        <%= element.frequency %>
                    </td>

                    <td class="table-name">
                        <%= element.name %>
                    </td>

                    <td class="table-dataField CoolSpektrometer-absolute api-data"
                        label="absolute"
                    >
                    </td>
                    
                    <td class="table-dataField CoolSpektrometer-relative api-data"
                        label="relative"
                    >
                    </td>
                </tr>
            <% }); %>
            <tr class="table-master">
                <td class="table-color">
                    
                </td>
                

                <td class="table-dataField font_italic">
                </td>

                <td class="table-name">
                </td>

                <td class="table-dataField" colspan="2">
                    <button id="CoolSpektrometer-SetReferenceBtn" class="button1" onclick="getHandlerObj(this,'SpectrometerHandler').setReference()">
                        <p>set reference</p>
                    </button>
                </td>
            </tr>

        </tbody>
    </table>
    <script>
        handlers["SpectrometerHandler"] = class SpectrometerHandler {
            constructor(element) {
                console.log("CREATING SpectrometerHandler")

                this.relative_dataFields = element.getElementsByClassName("CoolSpektrometer-relative");
                this.absolute_dataFields = element.getElementsByClassName("CoolSpektrometer-absolute");

                console.log("SpectrometerHandler", this)
            }
            
            async setReference(){
                await sendData(":8089/sensor/spectrophotometer/calibrate", "{}");
                this.update();
            }
            
            async update(){
                console.log("UPDATING SpectrometerHandler")

                
                for (let i = 0; i < this.relative_dataFields.length; i++) {
                    var response;
                    try {
                        var responseRaw = await sendData(":8089/sensor/spectrophotometer/measure/"+i,"");
                        if(responseRaw.status == 200){
                            response=await responseRaw.json();
                        }else{
                            throw Error("Server returned response code: "+responseRaw.status)
                        }
                    } catch (error) {
                        console.error("SpectrometerHandler: cannot fetch new spectrometer data: \n",error)
                        this.relative_dataFields[i].innerHTML = "Null";                   
                        this.relative_dataFields[i].classList.add("error");
                        this.absolute_dataFields[i].innerHTML = "Null";                   
                        this.absolute_dataFields[i].classList.add("error");
                        continue;
                    }

                    this.relative_dataFields[response.channel].innerHTML = Number(response.relative_value*100).toFixed(1) + " %";
                    this.relative_dataFields[i].classList.remove("error");
                    if(response.absolute_value != undefined){
                        this.absolute_dataFields[response.channel].innerHTML = response.absolute_value ;    
                        this.absolute_dataFields[i].classList.remove("error");
                    }else{
                        this.absolute_dataFields[response.channel].innerHTML = "---"
                    }
                }

            }

        }
    </script>
</div>

