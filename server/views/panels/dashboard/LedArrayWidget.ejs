<div id="LedArray-Widget" class="widget">
    <h1>Spektral</h1>
    <table class="table-widget-segment">
        <thead>
            <tr>
                <th>color</th>
                <th>name</th>
                <th>absolute</th>
                <th>relative</th>
            </tr>
        </thead>
        <tbody id="LedArray-Widget-Table">

            <% DashboardPanel.LedArrayWidget.rows.forEach(element => { %>
                <tr class="table-master">
                    <td class="table-color" style="color: <%if(element.borderColor){%><%=element.borderColor%><%}else{%><%="white"%><%} %>;">
                        â¬¤
                    </td>

                    <td class="table-name">
                        <%= element.name %>
                    </td>

                    <td class="table-dataField api-fetcher"
                        port="<% if(element.absolute.port){%><%=element.absolute.port%><%}else{%><%="8089"%><%} %>" 
                        unit="<% if(element.absolute.unit){%><%=element.absolute.unit%><%}else{%><%="lm"%><%} %>" 
                        resource="<%= element.absolute.resource %>" 
                        component="<%= element.absolute.component %>"
                        pull_period="<%= element.absolute.pull_period %>"
                        charted="<% if(element.relative.charted){%><%=element.relative.charted%><%}else{%><%="false"%><%} %>" 
                        borderColor="<% if(element.borderColor){%><%=element.borderColor%><%}else{%><%=""%><%} %>"
                        backgroundColor="<% if(element.backgroundColor){%><%=element.backgroundColor%><%}else{%><%=""%><%} %>"
                        label="absolute"
                    >
                    </td>
                    
                    <td class="table-dataField api-fetcher"
                        port="<% if(element.relative.port){%><%=element.relative.port%><%}else{%><%="8089"%><%} %>" 
                        unit="<% if(element.relative.unit){%><%=element.relative.unit%><%}else{%><%="%"%><%} %>" 
                        resource="<%= element.relative.resource %>" 
                        component="<%= element.relative.component %>"
                        pull_period="<%= element.relative.pull_period %>"
                        charted="<% if(element.relative.charted){%><%=element.relative.charted%><%}else{%><%="false"%><%} %>" 
                        borderColor="<% if(element.borderColor){%><%=element.borderColor%><%}else{%><%=""%><%} %>"
                        backgroundColor="<% if(element.backgroundColor){%><%=element.backgroundColor%><%}else{%><%=""%><%} %>"
                        label="relative"
                    >
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <div class="apiChart" >
        <canvas id="LedArray-Widget-Chart" chartIndex="<%= currNumOfCharts++ %>" history="<%= DashboardPanel.LedArrayWidget.chart.history %>"></canvas>
    </div>
    <script>
        setInterval(() => { //updater
            const chart = document.getElementById("LedArray-Widget-Chart");
            const chartIndex = chart.getAttribute("chartIndex");
            const url = "http://" + window.location.hostname;
            var i = 0;
            
            if(chartArray[chartIndex].count <= chart.getAttribute("history")){
                chartArray[chartIndex].count++;
            }
            
            chartArray[chartIndex].apiFetchers.forEach(element => {
                fetchDataAsJson(url+":"+element.getAttribute("port")+element.getAttribute("resource"))
                .then(response => {
                    response = response[element.getAttribute("component")];
                    const dataSet = chartArray[chartIndex].data.datasets[i++];

                    if(chartArray[chartIndex].count > chart.getAttribute("history")){
                        dataSet.data.shift();
                    }
                    

                    dataSet.data.push(response);
                    
                    
                    chartArray[chartIndex].update();

                    element.classList.remove("error");
                })
                .catch(err => {
                    element.innerHTML = "Null"
                    element.classList.add("error");
                    console.error(err);
                })
                
            });
            

        },5000);
        onloadQueue.push(() => {
            const chart = document.getElementById("LedArray-Widget-Chart");
            const chartIndex = chart.getAttribute("chartIndex");
            const possibleApiFetchers = document.getElementById("LedArray-Widget-Table").getElementsByClassName("api-fetcher");
            const apiFetchers = [];
            for(let i = 0; i< possibleApiFetchers.length; i++){
                if(possibleApiFetchers[i].getAttribute("charted")){
                    apiFetchers.push(possibleApiFetchers[i]);
                }
            }
            console.log("Iitializing a new chart \nindex:",chartIndex,"\nhistory:",chart.getAttribute("history"),"\napiFetchers:",apiFetchers);
            chartArray[chartIndex] =( new Chart(
                chart,
                {
                    type: 'line',
                    data: {
                        labels: getCountdownArray(chart.getAttribute("history")),
                        datasets: getEmptyDatasets(apiFetchers.length),
                    },
                    options: {
                        responsive: true,
                        animations: false,
                        plugins:{
                            legend:{
                                display: false
                            }
                        },
                        scales: {
                            x: {
                                display: true,
                                ticks: {
                                    display: false
                                },
                                grid:{
                                    color: "rgb(50,50,50)"
                                }
                            },
                            y: {
                                display: true,
                                grid:{
                                    color: "rgb(50,50,50)"
                                }
                            }
                        },
                        grid: {
                            color: "red"
                        }
                    },
                }
            ) );
            chartArray[chartIndex].apiFetchers= apiFetchers;    
            chartArray[chartIndex].count = 0;  

            var i = 0;
            chartArray[chartIndex].apiFetchers.forEach(element => {
                const dataSet = chartArray[chartIndex].data.datasets[i++];
                if( element.getAttribute("label") == "absolute"){
                    if(element.getAttribute("borderColor"))     dataSet.borderColor=element.getAttribute("borderColor");
                    if(element.getAttribute("backgroundColor")) dataSet.backgroundColor=element.getAttribute("backgroundColor");
                }else{
                    if(element.getAttribute("borderColor"))     dataSet.borderColor=element.getAttribute("backgroundColor");
                    if(element.getAttribute("backgroundColor")) dataSet.backgroundColor=element.getAttribute("borderColor");
                }
                
                dataSet.label = element.parentElement.getElementsByClassName("table-name")[0].innerHTML.trim() + " " + element.getAttribute("label");                  
            });
        });
             

    </script>
</div>