<div    class="handler status-indicator api-fetcher" 
        handler-id="StatusInfoPanelHandler" 
        resource="<%= Hotbar.StatusIndicator.resource %>" 
        port="<%= Hotbar.StatusIndicator.port %>">

    <div class="status-indicator-container">
        <div class="status-indicator-closed container" onclick="getHandlerObj(this,'StatusInfoPanelHandler').open()">
            <div>
                <p>errors:</p>
                <p class="errors-count bold"></p>
            </div>
            <div>
                <p>warnings:</p>
                <p class="warnings-count bold"></p>
            </div>
        </div>
        <div class="status-indicator-open container">
            <div class="tab-switcher handler" handler-id="TabSwitcherHandler">
                <div class="head">
                  <button onclick="getHandlerObj(this,'TabSwitcherHandler').changeTab(this)" class="button1 active"><h2  >warnings</h2></button> 
                  <button onclick="getHandlerObj(this,'TabSwitcherHandler').changeTab(this)"  class="button1" ><h2>errors</h2></button>
                </div>
                <div class="bodies">
                    <div class="warnings active">
                        <table class="table-widget-segment">
                             <colgroup>
                                <col style="width:36%" />
                                <col style="width:5%" />
                                <col style="width:30%" />
                                <col style="width:30%" />
                            </colgroup>
                            <thead>
                                <tr>
                                    <th>type</th>
                                    <th>id</th>
                                    <th>message</th>
                                    <th>detail</th>
                                </tr>
                            </thead>
                            <tbody class="warnings-tbody">
                                
                            </tbody>
                        </table>
                    </div>
                    <div class="errors">
                        <table class="table-widget-segment">
                            <colgroup>
                                <col style="width:36%" />
                                <col style="width:5%" />
                                <col style="width:30%" />
                                <col style="width:30%" />
                            </colgroup>
                            <thead>
                                <tr>
                                    <th>type</th>
                                    <th>id</th>
                                    <th>message</th>
                                    <th>detail</th>
                                </tr>
                            </thead>
                            <tbody class="errors-tbody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="status-indicator-close-btn" onclick="getHandlerObj(this,'StatusInfoPanelHandler').close()"><i class="material-icons">close</i></div>
        </div>
    </div>
    <script>
        handlers["StatusInfoPanelHandler"] = class StatusInfoPanelHandler extends BaseHandler{
            constructor(element) {
                super(element)

                this.container = element.getElementsByClassName("status-indicator-container")[0];

                this.errorCount = element.getElementsByClassName("errors-count")[0];
                this.warningCount = element.getElementsByClassName("warnings-count")[0];

                this.errorTable = element.getElementsByClassName("errors-tbody")[0];
                this.warningTable = element.getElementsByClassName("warnings-tbody")[0];

                this.errors = []
                this.warnings = []

                this.updatedValues = 0;
                this.errorEncountered = false;

                console.log(this)
            }

            afterFetchDone(){
                if(this.updatedValues<2 || this.errorEncountered){
                    return
                }
                this.errorCount.classList.remove("api-fetcher-error");
                this.warningCount.classList.remove("api-fetcher-error");
                this.updateTable(this.errorTable,this.errors);
                this.updateTable(this.warningTable,this.warnings);
                this.errorCount.innerHTML = this.errors.length;
                this.warningCount.innerHTML = this.warnings.length;
                this.updateClasses();
            }

            onErrorEncountered(){
                this.errorEncountered = true;
                
                this.errorCount.innerHTML = "Null";
                this.errorCount.classList.add("api-fetcher-error");

                this.warningCount.innerHTML = "Null";
                this.warningCount.classList.add("api-fetcher-error");
            }

            updateClasses(){
                this.element.classList.remove("status-indicator-error");
                this.element.classList.remove("status-indicator-warning");

                let errorLevel = 0;
                if(this.warnings.length > 0){
                    errorLevel = 1;
                }
                if(this.errors.length > 0){
                    errorLevel = 2;
                }

                switch (errorLevel) {
                    case 1:
                        this.element.classList.add("status-indicator-warning");
                        break;
                    case 2:
                        this.element.classList.add("status-indicator-error");
                        break;
                    default:
                        break;
                }
            }

            open(){
                this.container.classList.add("open")
            }
            close(){
                this.container.classList.remove("open")
            }

            updateTable(table, entries){
                let newInnerHTML = ""
                for (let i = 0; i < entries.length; i++) {
                    newInnerHTML += this.getFormatedTableEntry(entries[i])
                }
                if(table.innerHTML != newInnerHTML){
                    table.innerHTML = newInnerHTML;
                }
            }

            getFormatedTableEntry(entry){
                return`<tr entry-id="${entry.id}"><td>${entry.type}</td><td>${entry.id}</td><td>${entry.message}</td><td>${entry.detail}</td></tr>`
            }

            async update(){
                this.updatedValues = 0;
                this.errorEncountered = false;
                fetchDataAsJson(":"+this.element.getAttribute("port")+this.element.getAttribute("resource")+"/errors").then(response => {
                    this.updatedValues++;

                    this.errors=response.problems;

                    this.afterFetchDone();
                }).catch(err => {
                    this.onErrorEncountered();
                })

                fetchDataAsJson(":"+this.element.getAttribute("port")+this.element.getAttribute("resource")+"/warnings").then(response => {
                    this.updatedValues++;

                    this.warnings=response.problems;
                    
                    this.afterFetchDone();
                }).catch(err => {
                    this.onErrorEncountered();
                })
            }
        }
    </script>
</div>
