<% 
var currNumOfCharts = 0;
%>
<script>

    function callback(func){
        func();
    }
     
    const startMilis = Date.now();
    var chartArray = [];

    function getCountdownArray(length){
        var result = [];
        for (let i = 0; i < length; i++) {
            result.push(i);
        }
        return result;
    }
    function getEmptyDatasets(qantity){
        var result = [];
        for (let i = 0; i < qantity; i++) {
            result.push({
                data: [],
                cubicInterpolationMode: 'monotone',
            })
        }
        return result;
    }

    

    const onloadQueue = [];
    function executeOnloadQueue(){
        onloadQueue.forEach(element => {
            element();
        })
    }

    var handlers={} //global variable containing all handler classes

    onloadQueue.push(()=>{
        
        const sliders2 = document.getElementsByClassName("slider2");
        for (let i = 0; i < sliders2.length; i++) {
            const element = sliders2[i].getElementsByClassName("slider")[0];
            setTimeout(() => {
                if(element.getAttribute("resource")!=undefined){
                    fetchDataAsJson(":"+element.getAttribute("port")+element.getAttribute("resource"))
                    .then(response => {
                        slider2Set(element, response[element.getAttribute("component")]);
                        console.warn("SETTING SLIDER TO",response[element.getAttribute("component")],"FROM ",":"+element.getAttribute("port")+element.getAttribute("resource"),element);
                    })
                    .catch(err => {
                        //console.warn("UNABLE TO SET DEFAULT TO SLIDER",element.getAttribute("component"),element,error);
                        slider2Set(element, element.getAttribute("min")+((element.getAttribute("max")-element.getAttribute("min"))/2));
                        console.debug(
                            "unable to fetch resource: ",
                            ":"+element.getAttribute("port")+element.getAttribute("resource"), 
                            "\n", 
                            err.message , 
                            element
                        );
                        //console.error(element,"\n",error.message);
                    })
                }else{
                    if(element.getAttribute("default")!=undefined){
                        slider2Set(element,element.getAttribute("default"));
                    }
                }
            },50*i)
        }
    });

</script>
<script src="JS/helperFunctions.js"></script>
<script src="JS/handlers.js"></script>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PhenoBottle</title>
    
    <link rel="stylesheet" href="CSS/fonts/Fira_Code.css">
    <link rel="stylesheet" href="CSS/fonts/Roboto.css">
    <link rel="stylesheet" href="CSS/stylesheet.css">
</head>
<body onload="executeOnloadQueue()">
    
    <header id="HOTBAR">
        <button onclick="toggleClass_ByID('SIDEBAR', 'collapsed')"><img src="<%= getIcon("mini_logo") %>"></button>
        <h1>PhenoBottle</h1>
        <div>
            <p>hostname: </p>
            <p 
                class="api-fetcher bold"
                port="8089"
                unit=""
                resource="/core/hostname" 
                component="hostname"   
            ></p>
        </div>
        <div>
            <p>Short ID: </p>
            <p 
                class="api-fetcher bold"
                port="8089"
                unit=""
                resource="/core/sid" 
                component="sid"   
            ></p>
        </div>
        <div>
            <p id="hotbar-clock">16:22</p>
            <p id="hotbar-date">11.07.2024</p>
        </div>
        <div id="status-indicator" onclick="changeStatus(this)">
            <h2>Standby</h2>
        </div>
        
    </header>

    

    <div id="MAIN" class="container">
        <div id="SIDEBAR">
            <ul>
                <% contextCnt = 0; %>

                <% if(locals.DashboardPanel){ %>
                <li class="active" onclick="changeContext('<%= contextCnt++ %>')"><img src="<%= getIcon("dashboard") %>"><span>Dashboard</span></li>
                <% } %>

                <li onclick="changeContext('<%= contextCnt++ %>')"><img src="<%= getIcon("experiments") %>" ><span>Experiments</span></li>

                <li onclick="changeContext('<%= contextCnt++ %>')"><img src="<%= getIcon("config") %>" ><span>Config</span></li>

                <% if(locals.DevicePanel){ %>
                    <li onclick="changeContext('<%= contextCnt++ %>')"><img src="<%= getIcon("device") %>"><span>Device</span></li>
                <% } %>
            </ul>
        </div>
        <div id="CONTENT">
            
            <% if(locals.DashboardPanel){ %>
                <div id="DashBoard-Panel" class="content-panel container">
                    <% if(DashboardPanel.TemperatureWidget){  %>
                        <%- include('panels/dashboard/TemperatureWidget.ejs', {currNumOfCharts: currNumOfCharts++}) %>
                    <% } %>      
                    <% if(DashboardPanel.CoolSpektrometerWidget){  %>
                        <%- include('panels/dashboard/CoolSpektrometerWidget.ejs') %>
                    <% } %>     
                    <% if(DashboardPanel.KineticFluorometerWidget){  %>
                        <%- include('panels/dashboard/KineticFluorometerWidget.ejs', {currNumOfCharts: currNumOfCharts++}) %>
                    <% } %>   
                    <% if(DashboardPanel.ControlWidget){  %>
                        <%- include('panels/dashboard/ControlWidget.ejs') %>
                    <% } %>    
                    <% if(DashboardPanel.LedArrayWidget){ %>
                        <%- include('panels/dashboard/LedArrayWidget.ejs') %>
                    <% } %>           
                </div>  
            <% } %>

            <div id="experiments-Panel" class="content-panel container hidden">
                <%- include('panels/TextEditor', {type: "experiments"}) %>
            </div>
            <div id="configs-Panel" class="content-panel container hidden">
                <%- include('panels/TextEditor', {type: "configs"})%>
            </div>

            <% if(locals.DevicePanel){ %>
                <div id="Device-Panel" class="content-panel container hidden">
                    <%- include('panels/DevicePanel/ModuleListWidget.ejs') %>  
                    <%- include('panels/DevicePanel/ServicesStatus.ejs') %>   
                    <%- include('panels/DevicePanel/DeviceInfoWidget.ejs') %>
                </div>  
            <% } %>
            <div id="mainPopup" onclick="resetMainPopup()"></div>
        </div>

    </div>

    <script src="/node_modules/chart.js/dist/chart.umd.js"></script>
    <script src="/node_modules/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.min.js"></script>
    <script src="/node_modules/hammerjs/hammer.min.js"></script>    <!--
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css"></link>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js" integrity="sha512-8RnEqURPUc5aqFEN04aQEiPlSAdE0jlFS/9iGgUyNtwFnSKCXhmB6ZTNl7LnDtDWKabJIASzXrzD0K+LYexU9g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/yaml/yaml.min.js" integrity="sha512-+aXDZ93WyextRiAZpsRuJyiAZ38ztttUyO/H3FZx4gOAOv4/k9C6Um1CvHVtaowHZ2h7kH0d+orWvdBLPVwb4g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    -->

    <link rel="stylesheet" type="text/css" href="/CDN/codemirror/6.65.7/codemirror.min.css"></link>
    <script src="/CDN/codemirror/6.65.7/codemirror.min.js"></script>
    <script src="/CDN/codemirror/6.65.7/mode/yaml/yaml.min.js"></script>
    

    <script>
        var editors = [];
        editors["experiments"] = CodeMirror.fromTextArea(document.getElementById('experiments-codeditor'), {
                lineNumbers: true,
                mode: 'text/x-yaml',
                indentUnit: 2,
                extraKeys: {
                    "Tab": function(cm) {
                        var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                        cm.replaceSelection(spaces);
                    }
                }
            });
        editors["configs"] = CodeMirror.fromTextArea(document.getElementById('configs-codeditor'), {
                lineNumbers: true,
                mode: 'text/x-yaml',
                indentUnit: 2,
                extraKeys: {
                    "Tab": function(cm) {
                        var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                        cm.replaceSelection(spaces);
                    }
                }
            });

        editors.forEach(element => {
            element.refresh();
        });
    </script>


    <script>

        onloadQueue.push(() =>  {//REFRESH ALL COLORFILTERS
            console.log("REFERSHING COLORFILTERS");
            const colorFilters = document.getElementsByClassName("colorFilter");
            for (let i = 0; i < colorFilters.length; i++) {
                const element = colorFilters[i];
                element.style.backgroundColor = element.getAttribute("colorFilter");
                element.style.mask = "url("+element.getAttribute("maskImage")+") no-repeat center / contain";
            }
        })


        let currContext = {id:"",i:0,el:null};
        function changeContext(whereTo){
            if(currContext.i!=whereTo){
                currContext.i = whereTo;
                const contentPanels = document.getElementById("CONTENT").children;
                for(let i=0; i<contentPanels.length; i++){
                    contentPanels[i].classList.add("hidden");
                }

                const contentPanelsList = document.getElementById("SIDEBAR").children[0].children;
                for(let i=0; i<contentPanelsList.length; i++){
                    contentPanelsList[i].classList.remove("active");
                }
                contentPanels[whereTo].classList.remove("hidden");
                contentPanelsList[whereTo].classList.add("active");
                currContext.id = contentPanels[whereTo].id
                currContext.el = contentPanels[whereTo]
                apiUpdateWorkerUpdate(contentPanels[whereTo]);

                console.debug("CONTEXT CHANGED: ",currContext)
            }   
            editors.forEach(element => {
                element.refresh();
            });
        }
        onloadQueue.push(() => { changeContext(0);})
       


        async function reloadFileList(type) {
            console.log("reloading files for "+type);
            const fileList = document.getElementById(type+"-Panel").getElementsByClassName("file-list")[0];
            var list = [];
            try {
                const response = await fetch("/file-list",{
                    method: 'GET',
                    headers: {
                        'Content-Type': 'text/plain',
                        'target-directory': type
                    },
                    signal: AbortSignal.timeout( 1000 )    
                })
                if(response.status!= 200){
                    throw new Error("fetch error (response code): "+response.status);
                }
                list = JSON.parse(await response.text());

            } catch (error) {
                console.error('Error while getting file list:', error);
            }
            var result = "";
            list.forEach(element => {
                result+="<li onclick=\"loadFileIntoEditor(this,'"+element+"', '"+type+"')\">"+element+"</li>";
            });

            fileList.innerHTML = result;
            
        }

        function getCurrentFile(type){
            var rootPanelElement = document.getElementById(type+"-Panel");
            const fileExtension = rootPanelElement.getElementsByClassName("fe-fileExtension")[0].innerHTML;
            const fileName = rootPanelElement.getElementsByClassName("fe-fileName")[0].innerHTML;
            const fileNameFull = (fileExtension)?(fileName + "." + fileExtension):(fileName);

            return {
                fileName: fileName,
                fileExtension: fileExtension,
                fileNameFull: fileNameFull,
                directory: type,
                data: editors[type].getValue()           
            }
        }

        function clearEditor(type) {
            var rootPanelElement = document.getElementById(type+"-Panel");
            rootPanelElement.getElementsByClassName("fe-fileExtension")[0].innerHTML = "";
            rootPanelElement.getElementsByClassName("fe-fileExtension")[0].classList = "fe-fileExtension "
            rootPanelElement.getElementsByClassName("fe-fileName")[0].innerHTML = "";
            reloadFileList(type);
            editors[type].setValue("");
            editors[type].refresh();
        }

        /*
        element = the element in the list that called the function
        */
        async function loadFileIntoEditor(element, fileName, type){
            var rootPanelElement = document.getElementById(type+"-Panel");

            

            //deselects every other file in fileList and enables the current one
            for (let i = 0; i < element.parentNode.children.length; i++) {
                element.parentNode.children[i].classList.remove("active");
            }
            element.classList.add("active");


            var popupLevel = 0; 
            var statusCache = 0;
            

            //gets the selected file data
            fetchData( "/read-file", {"target-directory":type, "target-file":fileName}) 
            .then(response => {
                
                statusCache = response.status;
                //converts the response body to a simple string
                return response.text();
                  
            })
            .then(data => {
                // `data` is now a string containing the response body
                if(statusCache!=200){
                    switch(statusCache){
                        case 403:
                            throw new Error("insufficient permissions");
                            break;
                        case 404:
                            throw new Error("the file does not exist");
                            break; 
                        case 500:
                            throw new Error("internal server error");
                            break; 

                        default:
                            throw new Error("unknown error "+statusCache+"<br>"+ data);
                            break; 
                    }
                    
                }
                else{
                    editors[type].setValue(data);
                    editors[type].refresh();
                }                
            })
            .catch(error => {
                console.error('error while loading a file into editor: ', error);
                setEditorHeaderPopup(type, "error","error while loading the file: " +  error);
                popupLevel=2;
                editors[type].setValue("error occured"); 
                editors[type].refresh();
            });

            //split the file name by point, than pop the last part as file extension and reasamble the rest into the file name
            const splitFileName = fileName.split(".");
            var fileExtension = "";
            if(splitFileName.length==1 && popupLevel<2){
                setEditorHeaderPopup(type, "warning", "warning, this file does not have a file extension");
                popupLevel=1;
            }
            else{
                fileExtension = splitFileName.pop(); 
            }
            fileName = splitFileName.join(".");     

            //sets the name, file extension and file extension class
            rootPanelElement.getElementsByClassName("fe-fileExtension")[0].innerHTML = fileExtension;
            rootPanelElement.getElementsByClassName("fe-fileExtension")[0].classList = "fe-fileExtension " + fileExtension
            rootPanelElement.getElementsByClassName("fe-fileName")[0].innerHTML = fileName;
            if(popupLevel<1){
                setEditorHeaderPopup(type, "ok", "");     
            }
                   
        }

        async function deleteFileOnServer(type) {
            const currFile = getCurrentFile(type);
            var statusCache = 0;
            fetch("/delete-file", {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'text/plain',
                    'target-file': currFile.fileNameFull,
                    'target-directory': type,
                },
                signal: AbortSignal.timeout( 1000 )    
            }).then( response => {
                statusCache = response.status;
                return response.text();
            }).then(data => {
                switch(statusCache){
                    case 200:
                        setEditorHeaderPopup(type, "info", "file deleted successfully"); 
                        clearEditor(type);    
                        reloadFileList(type);
                        break;
                    case 500:
                        throw new Error("internal server error");
                        break; 
                    default:
                        throw new Error("unknown error "+statusCache+"<br>"+ data);
                        break; 
                }
            }).catch(error => {
                
                console.error('error while deleting the file:', error);
                setEditorHeaderPopup(type, "error", "error while deleting the file:<br>" + error);
            })            
        }

        async function saveFileOntoServer(type) {
            const currFile = getCurrentFile(type);
            var statusCache = 0;

            fetch("/send-file", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'text/plain',
                            'target-file': currFile.fileNameFull,
                            'target-directory': type
                        },
                        body: currFile.data,
                        signal: AbortSignal.timeout( 1000 )    
            }).then( response => {
                statusCache = response.status;
                return response.text();
            }).then(data => {
                switch(statusCache){
                    case 200:
                        setEditorHeaderPopup(type, "info", "file saved successfully"); 
                        break;
                    case 422:
                        var errorListObject = JSON.parse(data);
                        console.log(errorListObject);
                        if(errorListObject[0].criticalError){
                            throw new Error(errorListObject[0].criticalError);
                        }
                        var parsedResult = "<table class=\"errorTable\"><thead><tr><th>path</th><th>error</th><th>details</th></tr></thead><tbody>";
                        errorListObject.forEach(element => {
                            if(element.instancePath == ""){
                                element.instancePath = "/";
                            }
                            parsedResult+="<tr><td><span class='comment'>"+element.instancePath+"</span></td><td>"+element.message+"</td><td>"+JSON.stringify(element.params)+"</td></tr>";
                        })
                        parsedResult+="</tbody></table>";

                        throw new Error("this file is not valid: <br>" + parsedResult);
                    case 500:
                        throw new Error("internal server error");
                        break; 
                    default:
                        throw new Error("unknown error "+statusCache+"<br>"+ data);
                        break; 
                }
            }).catch(error => {
                console.error('error while saving the file:', error);
                setEditorHeaderPopup(type, "error", "error while saving the file:<br>" + error);
            })               
        }

        async function createNewFileOnServer(caller, type) {
            const rootPanelElement = document.getElementById(type+"-Panel");

            var fileName = caller.parentElement.getElementsByClassName("add-button-fileName")[0].value;
            console.log("file name: ", fileName);
            caller.parentElement.getElementsByClassName("add-button-fileName")[0].value = "";
            rootPanelElement.getElementsByClassName("add-button")[0].children[0].classList.remove("activated");

            try {
                const response = await fetch("/create-file", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'text/plain',
                            'target-file': fileName,
                            'target-directory': type
                        },
                        signal: AbortSignal.timeout( 1000 )    
                });

                const result = await response.text();
            } catch (error) {
                console.error('Error while sending data:', error);
            }

            reloadFileList(type);
        }

        
        
        //clock updater
        setInterval(() => {
            const currentDateTime = new Date();
            const newDate = currentDateTime.getDate() + "." + (currentDateTime.getMonth()+1) + " " + currentDateTime.getFullYear();
            const newTime = addZeroIfNeeded(currentDateTime.getHours()) + ":" + addZeroIfNeeded(currentDateTime.getMinutes());
            document.getElementById("hotbar-date").innerHTML = newDate;
            document.getElementById("hotbar-clock").innerHTML = newTime;

            function addZeroIfNeeded(time){
                if(time < 10){
                    return "0" + time;
                }
                return time;
            }
        }, 1000);
        
        function changeStatus(element){
            console.log(element.children[0].innerHTML);
            switch (element.children[0].innerHTML){
                case "Standby": {
                    element.children[0].innerHTML = "Error";
                    break;
                }
                case "Running": {
                    element.children[0].innerHTML = "Standby";
                    break;
                }
                case "Error": {
                    element.children[0].innerHTML = "Running";
                    break;
                }
            }
            switch (element.children[0].innerHTML){
                case "Standby": {
                    element.style.backgroundColor = "green";
                    break;
                }
                case "Running": {
                    element.style.backgroundColor = "orange";
                    break;
                }
                case "Error": {
                    element.style.backgroundColor = "red";
                    break;  
                }
            }
        }

        function setStatus(type){
            const element = document.getElementById("status-indicator");
            switch (type){
                case "standby": {
                    element.children[0].innerHTML = "Standby";
                    element.style.backgroundColor = "green";
                    break;
                }
                case "running": {
                    element.children[0].innerHTML = "Running";
                    element.style.backgroundColor = "orange";
                    break;
                }
                case "error": {
                    element.children[0].innerHTML = "Error";
                    element.style.backgroundColor = "red";
                    break;  
                }
            }
        }

        /*
        sets the targeted editors popup to a type and sets the body of the message, overwrites last value
        */
        function setEditorHeaderPopup(type, messageType, message){
            const rootPanelElement = document.getElementById(type+"-Panel");
            const header = rootPanelElement.getElementsByClassName("fe-header")[0];
            const popup = rootPanelElement.getElementsByClassName("fe-popup")[0];

            header.classList = "fe-header " + messageType;
            popup.innerHTML = message;
        }

        function setMainPopup(messageType, message){
            const popup = document.getElementById("mainPopup")

            

            if(popup.innerHTML != ("<p> "+message+" </p>")){
                if(message!=""){
                    document.getElementById("MAIN").classList.add("disabled");
                }
                popup.innerHTML = "<p> "+message+" </p>";
                popup.classList = messageType;
            }
        }

        function resetMainPopup(){
            const popup = document.getElementById("mainPopup")

            document.getElementById("MAIN").classList.remove("disabled");

            popup.classList = "";
        }
        
    </script>
    <script src="JS/apiUpdateWorker.js"></script>
    <script src="JS/moduleApiUpdateWorker.js"></script>
</body>
</html>