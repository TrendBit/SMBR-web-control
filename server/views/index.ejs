<% 

function getIcon(name){
    switch(name){
        case "activate":
            return "./UI/icons/activate_icon.svg"
        case "board":
            return "./UI/icons/boards_icon.svg"
        case "bottle":
            return "./UI/icons/bottle_icon.svg"
        case "config":
            return "./UI/icons/config_icon.svg"
        case "controls":
            return "./UI/icons/controls_icon.svg"
        case "dashboard":
            return "./UI/icons/dashboard_icon.svg"
        case "experiments":
            return "./UI/icons/experiments_icon.svg"
        case "leds":
            return "./UI/icons/led_icon.svg"
        case "lightbulb":
            return "./UI/icons/lightbulb_icon.svg"
        case "logo":
            return "./UI/icons/logo_icon.svg"
        case "menu":
            return "./UI/icons/menu_icon.svg"
        case "save":
            return "./UI/icons/save_icon.svg"
        case "search":
            return "./UI/icons/search_icon.svg"
        case "temperature_ambient":
            return "./UI/icons/temperature_ambient_icon.svg"
        case "temperature":
            return "./UI/icons/temperature_icon.svg"
        case "trashbin":
            return "./UI/icons/trashbin_icon.svg"
        case "subElement":
            return "./UI/UI-elements/subElement.svg"
        case "subElement-last":
            return "./UI/UI-elements/subElement-last.svg"
        default:
            return "./UI/LogoPlaceholder.png"
    }
}

var currNumOfCharts = 0;
%>
<script>
    var chartUpdaterArray = [];
    var chartArray = [];

    function getCountdownArray(length){
        result = [];
        for (let i = 0; i < length; i++) {
            result.add(i);
        }
        return result;
    }
    function getEmptyDatasets(qantity){
        reuslt = [];
        for (let i = 0; i < qantity; i++) {
            result.add({
                data: [],
                cubicInterpolationMode: 'monotone',
                tension: 0.4
            })
        }
        return result;
    }
</script>
<script src="JS/helperFunctions.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PhenoBottle</title>
    <link rel="stylesheet" href="stylesheet.css">
</head>
<body>
    <header id="HOTBAR">
        <button onclick="toggleClass_ByID('SIDEBAR', 'collapsed')"><img src="UI/icons/Menu-icon.svg"></button>
        <h1>PhenoBottle</h1>
        <div>
            <p id="hotbar-clock">16:22</p>
            <p id="hotbar-date">11.07.2024</p>
        </div>
        <div id="Status-Indicator" onclick="changeStatus(this)">
            <h2>Error</h2>
        </div>
        
    </header    >
    <div class="container">

        <div id="SIDEBAR">
            <ul>
                <li class="active" onclick="changeContext(0)"><img src="UI/icons/dashboard_icon.svg"><span>Dashboard</span></li>
                <li onclick="changeContext(1)"><img src="UI/icons/experiments_icon.svg" ><span>Experiments</span></li>
                <li onclick="changeContext(2)"><img src="UI/icons/config_icon.svg" ><span>Config</span></li>
            </ul>
        </div>
        <div id="CONTENT">
            
            <div id="DashBoard-Panel" class="content-panel container">

                <div id="Temperature-Widget" class="widget ">
                    <h1>Temperature</h1>
                    <table class="table-widget-segment">
                        <thead>
                            <tr>
                                <th>color</th>
                                <th>name</th>
                                <th>current</th>
                                <th>target</th>
                            </tr>
                        </thead>
                        <tbody id="Temperature-Widget-Table">

                            <% Temperature_widget.rows.forEach(element => { %>
                                <tr class="table-master">
                                    <td class="table-color">
                                        <img src="<%= getIcon(element.icon) %>" alt="<%= element.icon %>">
                                    </td>

                                    <td class="table-name">
                                        <%= element.name %>
                                        <% if(element.sub_rows) { %> 
                                            <span class="collapse button1">v</span> 
                                        <% } %>
                                    </td>

                                    <td class="table-current api-fetcher"
                                        port="<% if(element.port){%><%=element.port%><%}else{%><%="8089"%><%} %>" 
                                        unit="<% if(element.unit){%><%=element.unit%><%}else{%><%="°C"%><%} %>" 
                                        resource="<%= element.resource %>" 
                                        component="<%= element.component %>"
                                        pull_period="<%= element.pull_period %>"
                                    >
                                    </td>
                                    
                                    <td class="table-target">
                                        <% if(element.input) {%> 
                                            <input type='number' class="button1" min="<%= element.input.min %>" max="<%= element.input.max %>" placeholder="nan"> 
                                            <input type="button" class="button1" value=">">
                                        <% } %>
                                    </td>
                                </tr>

                                <% if(element.sub_rows){numOfSubRows=element.sub_rows.length; for( let u = 0; u < numOfSubRows; u++ ) { let sub_element = element.sub_rows[u];%>
                                    <tr class="table-sub">
                                        <td class="table-color">
                                            <img src="<% if((u+1)<numOfSubRows){%><%=getIcon("subElement")%><%}else{%><%=getIcon("subElement-last")%><%} %>" alt="sub_element">
                                        </td>
    
                                        <td class="table-name">
                                            <%= sub_element.name %>
                                        </td>
    
                                        <td class="table-current api-fetcher"
                                            port="<% if(sub_element.port){%><%=sub_element.port%><%}else{%><%="8089"%><%} %>" 
                                            unit="<% if(sub_element.unit){%><%=sub_element.unit%><%}else{%><%="°C"%><%} %>" 
                                            resource="<%= sub_element.resource %>" 
                                            component="<%= sub_element.component %>"
                                            pull_period="<%= sub_element.pull_period %>"
                                        >
                                        </td>
                                        
                                        <td class="table-target">
                                            <% if(sub_element.input) {%> 
                                                <input type='number' class="button1" min="<%= sub_element.input.min %>" max="<%= sub_element.input.max %>"> 
                                                <input type="button" class="button1" value=">">
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }} %>

                            <% }); %>
                        </tbody>
                    </table>
                    <div class="apiChart">
                        <div style="display: none;">
                        </div>
                        <canvas id="Temperature-Widget-Chart"></canvas>
                    </div>
                    <script>
                        chartUpdaterArray.add(() =>{ //updater
                            
                        })  
                        const chart = document.getElementById("Temperature-Widget-Chart")
                        const possibleApiFetchers = document.getElementById("Temperature-Widget-Table").getElementsByClassName("api-fetcher");
                        const apiFetchers = [];
                        for(let i = 0; i< possibleApiFetchers.length; i++){
                            if(possibleApiFetchers[i].getAttribute("charted")){
                                apiFetchers.add(possibleApiFetchers[i]);
                            }
                        }
                        document.getElementById("Temperature-Widget-Table").getElementsByClassName("api-fetcher")
                        chartArray.add( new Chart(
                            chart,
                            {
                                type: 'line',
                                data: {
                                    labels: getCountdownArray(chart.getAttribute("history")),
                                    datasets: getEmptyDatasets(apiFetchers.length),
                                },
                                options: {
                                    responsive: true,
                                    animations: false,
                                    
                                }
                            }
                        ) )                   

                    </script>
                </div>
            </div>  


            <div id="experiments-Panel" class="content-panel container hidden">
                <div class="file-browser">
                    <div class="search-bar">
                        <input type="text">
                        <img src="UI/icons/search_icon.svg" alt="searchIcon" class="icon">
                    </div>
                    <div class="add-button ">
                        <button class="button1"><img src="UI/icons/add_icon.svg" alt="addIcon"></button>
                    </div>
                    <ul class="file-list">
                        <% Editor.experiments.forEach(element => { %>
                            <li onclick="loadFileIntoEditor('<%= element %>', 'experiments')"><%= element %></li>
                        <% }); %>
                    </ul>
                    <div class="file-details">
                        <h2 class="file-details-name">File.yaml</h2>
                        <ul class="file-details-stats">
                            <li>created: <span>sdaddw</span></li>
                            <li>last-edited: <span>sdaddw</span></li>
                            <li>size: <span>sdaddw</span></li>
                        </ul>
                        <div class="file-details-buttons">
                            <button id="activate-button"><span>Activate</span><img src="UI/icons/activate_icon.svg" alt="activateIcon" class="icon"></button>
                            <button id="remove-button">  <span>Remove</span>  <img src="UI/icons/trashbin_icon.svg" alt="removeIcon" class="icon">  </button>
                        </div>
                        
                    </div>
                </div>
                <div class="file-editor">
                    
                    <textarea id="experiments-codeditor" name="experiments-codeditor"></textarea>
                    <button onclick="saveFileOntoServer('experiments')">Save changes <img src="UI/icons/save_icon.svg" alt="saveChangesIcon" class="icon"></button>
                </div>
            </div>
            <div id="configs-Panel" class="content-panel container hidden">
                <div class="file-browser">
                    <div class="search-bar">
                        <input type="text">
                        <img src="UI/icons/search_icon.svg" alt="searchIcon" class="icon">
                    </div>
                    <div class="add-button ">
                        <button class="button1"><img src="UI/icons/add_icon.svg" alt="addIcon"></button>
                    </div>
                    <ul class="file-list">
                        <% Editor.configs.forEach(element => { %>
                            <li onclick="loadFileIntoEditor('<%= element %>', 'configs')"><%= element %></li>
                        <% }); %>
                    </ul>
                    <div class="file-details">
                        <h2 class="file-details-name" >File.yaml</h2>
                        <ul class="file-details-stats">
                            <li>created: <span>sdaddw</span></li>
                            <li>last-edited: <span>sdaddw</span></li>
                            <li>size: <span>sdaddw</span></li>
                        </ul>
                        <div class="file-details-buttons">
                            <button id="activate-button"><span>Activate</span><img src="UI/icons/activate_icon.svg" alt="activateIcon" class="icon"></button>
                            <button id="remove-button">  <span>Remove</span>  <img src="UI/icons/trashbin_icon.svg" alt="removeIcon" class="icon">  </button>
                        </div>
                        
                    </div>
                </div>
                <div class="file-editor">
                    
                    <textarea id="configs-codeditor" name="configs-codeditor">
                    </textarea>
                    <button onclick="saveFileOntoServer('configs')">Save changes <img src="UI/icons/save_icon.svg" alt="saveChangesIcon" class="icon"></button>
                </div>
            </div>
        </div>

    </div>
    <script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
    <script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/perl/perl.min.js"></script>
    
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css"></link>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/abbott.min.css"></link>
    
    <script>
        var editors = [];
        editors["experiments"] = CodeMirror.fromTextArea(document.getElementById('experiments-codeditor'), {
                lineNumbers: true,
                mode: 'text/x-toml',
                theme: 'neat'
            });
        editors["configs"] = CodeMirror.fromTextArea(document.getElementById('configs-codeditor'), {
                lineNumbers: true,
                mode: 'text/x-toml'
            });
        editors.forEach(element => {
            element.refresh();
        });
    </script>


    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        let currContext = 0;
        function changeContext(whereTo){
            if(currContext!=whereTo){
                currContext = whereTo;
                const contentPanels = document.getElementById("CONTENT").children;
                for(let i=0; i<contentPanels.length; i++){
                    contentPanels[i].classList.add("hidden");
                    
                }

                const contentPanelsList = document.getElementById("SIDEBAR").children[0].children;
                for(let i=0; i<contentPanelsList.length; i++){
                    contentPanelsList[i].classList.remove("active");
                }
                contentPanels[whereTo].classList.remove("hidden");
                contentPanelsList[whereTo].classList.add("active");
            }   
            editors.forEach(element => {
                element.refresh();
            });
        }

        async function loadFileIntoEditor(filePath, type){
            //document.getElementById(editorID).innerHTML = await fetchData(filePath);

            var rootPanelElement = document.getElementById(type+"-Panel");
           
            console.log("root panel element: ",rootPanelElement);

            fetchData(type + "/" + filePath)
            .then(response => {
                // Convert the response body to a string
                const headersToFetch = ["Last-Modified", "Content-Length"];

                var newDetails = "";
                newDetails+="<li>" + "Last modified" + ": <span>" + (new Date(response.headers.get("Last-Modified"))).toISOString().replace('T',' ').split(".")[0] + "</span></li>";
                newDetails+="<li>" + "size" + ": <span>" + response.headers.get("Content-Length") + " B </span></li>";
                
                console.log("file details element: ",rootPanelElement.getElementsByClassName("file-details-stats"));
                rootPanelElement.getElementsByClassName("file-details-stats")[0].innerHTML = newDetails;
                return response.text();
                
            })
            .then(data => {
                // `data` is now a string containing the response body
                editors[type].setValue(data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
            console.log("file name element: ",rootPanelElement.getElementsByClassName("file-details-name"));
            rootPanelElement.getElementsByClassName("file-details-name")[0].innerHTML = filePath;
        }

        async function saveFileOntoServer(type) {
            var rootPanelElement = document.getElementById(type+"-Panel");
            var fileName = rootPanelElement.getElementsByClassName("file-details-name")[0].innerHTML;
            console.log("editor content: ",editors[type].getValue());
            if(editors[type].getValue()){
                try {
                    const response = await fetch("/send-file", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'text/plain',
                                'file-name': fileName,
                                'target-directory': type
                            },
                            body: editors[type].getValue()
                    });

                    const result = await response.text();
                } catch (error) {
                    console.error('Error while sending data:', error);
                }
            }
            
        }
        
        const currentDateTime = new Date();
        setInterval(() => {
            const newTime = currentDateTime.getDate() + "." + (currentDateTime.getMonth()+1) + " " + currentDateTime.getFullYear();
            if(newTime != document.getElementById("hotbar-date").innerHTML){
                document.getElementById("hotbar-date").innerHTML = newTime;
            }
            
        }, 1000);
        function changeStatus(element){
            console.log(element.children[0].innerHTML);
            switch (element.children[0].innerHTML){
                case "Standby": {
                    element.children[0].innerHTML = "Error";
                    break;
                }
                case "Running": {
                    element.children[0].innerHTML = "Standby";
                    break;
                }
                case "Error": {
                    element.children[0].innerHTML = "Running";
                    break;
                }
            }
            switch (element.children[0].innerHTML){
                case "Standby": {
                    element.style.backgroundColor = "green";
                    break;
                }
                case "Running": {
                    element.style.backgroundColor = "orange";
                    break;
                }
                case "Error": {
                    element.style.backgroundColor = "red";
                    break;  
                }
            }
        }
        document.getElementById("hotbar-clock").innerHTML = currentDateTime.getHours() + ":" + currentDateTime.getMinutes(); 
    </script>
    <script src="JS/apiUpdateWorker.js"></script>
</body>
</html>