<% 
var currNumOfCharts = 0;
%>
<script>
    var updateSwitch = true;
    var currentDateTime = new Date();

    function callback(func){
        func();
    }
     
    const startMilis = Date.now();
    var chartArray = [];

    function getCountdownArray(length){
        var result = [];
        for (let i = 0; i < length; i++) {
            result.push(i);
        }
        return result;
    }
    function getEmptyDatasets(qantity){
        var result = [];
        for (let i = 0; i < qantity; i++) {
            result.push({
                data: [],
                cubicInterpolationMode: 'monotone',
            })
        }
        return result;
    }

    

    const onloadQueue = [];
    function executeOnloadQueue(){
        onloadQueue.forEach(element => {
            element();
        })
    }

    var handlers={} //global variable containing all handler classes

    onloadQueue.push(()=>{
        
        const sliders2 = document.getElementsByClassName("slider2");
        for (let i = 0; i < sliders2.length; i++) {
            const element = sliders2[i].getElementsByClassName("slider")[0];
            setTimeout(() => {
                if(element.getAttribute("resource")!=undefined){
                    fetchDataAsJson(":"+element.getAttribute("port")+element.getAttribute("resource"))
                    .then(response => {
                        slider2Set(element, response[element.getAttribute("component")]);
                        console.warn("SETTING SLIDER TO",response[element.getAttribute("component")],"FROM ",":"+element.getAttribute("port")+element.getAttribute("resource"),element);
                    })
                    .catch(err => {
                        //console.warn("UNABLE TO SET DEFAULT TO SLIDER",element.getAttribute("component"),element,error);
                        slider2Set(element, element.getAttribute("min")+((element.getAttribute("max")-element.getAttribute("min"))/2));
                        console.debug(
                            "unable to fetch resource: ",
                            ":"+element.getAttribute("port")+element.getAttribute("resource"), 
                            "\n", 
                            err.message , 
                            element
                        );
                        //console.error(element,"\n",error.message);
                    })
                }else{
                    if(element.getAttribute("default")!=undefined){
                        slider2Set(element,element.getAttribute("default"));
                    }
                }
            },50*i)
        }
    });


</script>
<script src="JS/helperFunctions.js"></script>
<script src="JS/handlers.js"></script>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SMPBR</title>
    
    <link rel="stylesheet" href="CSS/fonts/Fira_Code.css">
    <link rel="stylesheet" href="CSS/fonts/GoogleMaterialIcons.css">
    <link rel="stylesheet" href="CSS/fonts/Roboto.css">
    <link rel="stylesheet" href="CSS/stylesheet.css">
    <link rel="stylesheet" href="CSS/fileEditor.css">
</head>
<body onload="executeOnloadQueue()">
    
    <header id="HOTBAR">
        <button onclick="toggleClass_ByID('SIDEBAR', 'collapsed')"><img src="<%= getIcon("mini_logo") %>"></button>
        <h1>Smart Modular Photo-Bio-Reactor</h1>
        <div>
        <div class="api-fetcher handler" handler-id="HostnameTitleHandler" update-cost="11">
            <p>hostname: </p>
            <p 
                class="api-fetcher bold"
                port="8089"
                unit=""
                resource="/core/hostname" 
                component="hostname"   
            ></p>
        </div>
        <div>
            <p>IP address: </p>
            <p 
                class="api-fetcher bold"
                port="8089"
                unit=""
                resource="/core/ip_address" 
                component="ipAddress"   
            ></p>
        </div>
        <div>
            <p>Short ID: </p>
            <p 
                class="api-fetcher bold"
                port="8089"
                unit=""
                resource="/core/sid" 
                component="sid"   
            ></p>
        </div>
        <div>
            <p id="hotbar-clock">16:22</p>
            <p id="hotbar-date">11.07.2024</p>
        </div>
        <div id="status-indicator" onclick="changeStatus(this)">
            <h2>Standby</h2>
        </div>
        
    </header>

    

    <div id="MAIN" class="container">
        <div id="SIDEBAR">
            <ul>
                <% contextCnt = 0; %>

                <% if(locals.DashboardPanel){ %>
                <li class="active" onclick="changeContext('<%= contextCnt++ %>')">
                    <i class="material-icons filled">home</i>
                    <span>Dashboard</span>
                </li>
                <% } %>

                <li onclick="changeContext('<%= contextCnt++ %>')">
                    <i class="material-icons filled">science</i>
                    <span>Scripts</span>
                </li>

                <li onclick="changeContext('<%= contextCnt++ %>')">
                    <i class="material-icons filled">build</i>
                    <span>Config</span>
                </li>

                <% if(locals.DevicePanel){ %>
                    <li onclick="changeContext('<%= contextCnt++ %>')">
                        <i class="material-icons filled">terminal</i>
                        <span>Device</span>
                    </li>
                <% } %>
            </ul>
        </div>
        <div id="CONTENT">
            
            <% if(locals.DashboardPanel){ %>
                <div id="DashBoard-Panel" class="content-panel container">
                    <% if(DashboardPanel.TemperatureWidget){  %>
                        <%- include('panels/dashboard/TemperatureWidget.ejs', {currNumOfCharts: currNumOfCharts++}) %>
                    <% } %>      
                    <% if(DashboardPanel.CoolSpektrometerWidget){  %>
                        <%- include('panels/dashboard/CoolSpektrometerWidget.ejs') %>
                    <% } %>     
                    <% if(DashboardPanel.KineticFluorometerWidget){  %>
                        <%- include('panels/dashboard/KineticFluorometerWidget.ejs', {currNumOfCharts: currNumOfCharts++}) %>
                    <% } %>   
                    <% if(DashboardPanel.ControlWidget){  %>
                        <%- include('panels/dashboard/ControlWidget.ejs') %>
                    <% } %>    
                    <% if(DashboardPanel.LedArrayWidget){ %>
                        <%- include('panels/dashboard/LedArrayWidget.ejs') %>
                    <% } %>           
                </div>  
            <% } %>

            <div id="experiments-Panel" class="content-panel container hidden content-panel-fullscreen">
                <%- include('panels/TextEditor', {allowCreateFiles: true, resourceURL: ":8089/recipes", includeRuntimeInfo: true}) %>
            </div>
            <div id="configs-Panel" class="content-panel container hidden content-panel-fullscreen">
                <%- include('panels/TextEditor', {allowCreateFiles: false, resourceURL: "/config-files", includeRuntimeInfo: false})%>
            </div>

            <% if(locals.DevicePanel){ %>
                <div id="Device-Panel" class="content-panel container hidden">
                    <%- include('panels/DevicePanel/ModuleListWidget.ejs') %>  
                    <%- include('panels/DevicePanel/ServicesStatus.ejs') %>   
                    <%- include('panels/DevicePanel/DeviceInfoWidget.ejs') %>
                </div>  
            <% } %>
            <div id="mainPopup" onclick="resetMainPopup()"></div>
        </div>

    </div>

    <script src="/node_modules/chart.js/dist/chart.umd.js"></script>
    <script src="/node_modules/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.min.js"></script>
    <script src="/node_modules/hammerjs/hammer.min.js"></script>    <!--
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css"></link>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js" integrity="sha512-8RnEqURPUc5aqFEN04aQEiPlSAdE0jlFS/9iGgUyNtwFnSKCXhmB6ZTNl7LnDtDWKabJIASzXrzD0K+LYexU9g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/yaml/yaml.min.js" integrity="sha512-+aXDZ93WyextRiAZpsRuJyiAZ38ztttUyO/H3FZx4gOAOv4/k9C6Um1CvHVtaowHZ2h7kH0d+orWvdBLPVwb4g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    -->

    <link rel="stylesheet" type="text/css" href="/CDN/codemirror/6.65.7/codemirror.min.css"></link>
    <script src="/CDN/codemirror/6.65.7/codemirror.min.js"></script>
    <script src="/CDN/codemirror/6.65.7/mode/yaml/yaml.min.js"></script>
    

    <script>

        onloadQueue.push(() =>  {//REFRESH ALL COLORFILTERS
            console.log("REFERSHING COLORFILTERS");
            const colorFilters = document.getElementsByClassName("colorFilter");
            for (let i = 0; i < colorFilters.length; i++) {
                const element = colorFilters[i];
                element.style.backgroundColor = element.getAttribute("colorFilter");
                element.style.mask = "url("+element.getAttribute("maskImage")+") no-repeat center / contain";
            }
        })


        let currContext = {id:"",i:0,el:null};
        function changeContext(whereTo){
            if(currContext.i!=whereTo){
                currContext.i = whereTo;
                const contentPanels = document.getElementById("CONTENT").children;
                for(let i=0; i<contentPanels.length; i++){
                    contentPanels[i].classList.add("hidden");
                }

                const contentPanelsList = document.getElementById("SIDEBAR").children[0].children;
                for(let i=0; i<contentPanelsList.length; i++){
                    contentPanelsList[i].classList.remove("active");
                }
                contentPanels[whereTo].classList.remove("hidden");
                contentPanelsList[whereTo].classList.add("active");
                currContext.id = contentPanels[whereTo].id
                currContext.el = contentPanels[whereTo]
                apiUpdateWorkerUpdate(contentPanels[whereTo]);

                console.debug("CONTEXT CHANGED: ",currContext)
            }   
        }
        onloadQueue.push(() => { changeContext(0);})
       
        
        //clock updater
        setInterval(() => {
            currentDateTime = new Date();
            const newDate = currentDateTime.getDate() + "." + (currentDateTime.getMonth()+1) + " " + currentDateTime.getFullYear();
            const newTime = addZeroIfNeeded(currentDateTime.getHours()) + ":" + addZeroIfNeeded(currentDateTime.getMinutes());
            document.getElementById("hotbar-date").innerHTML = newDate;
            document.getElementById("hotbar-clock").innerHTML = newTime;

            function addZeroIfNeeded(time){
                if(time < 10){
                    return "0" + time;
                }
                return time;
            }
        }, 1000);
        
        function changeStatus(element){
            console.log(element.children[0].innerHTML);
            switch (element.children[0].innerHTML){
                case "Standby": {
                    element.children[0].innerHTML = "Error";
                    break;
                }
                case "Running": {
                    element.children[0].innerHTML = "Standby";
                    break;
                }
                case "Error": {
                    element.children[0].innerHTML = "Running";
                    break;
                }
            }
            switch (element.children[0].innerHTML){
                case "Standby": {
                    element.style.backgroundColor = "green";
                    break;
                }
                case "Running": {
                    element.style.backgroundColor = "orange";
                    break;
                }
                case "Error": {
                    element.style.backgroundColor = "red";
                    break;  
                }
            }
        }

        function setStatus(type){
            const element = document.getElementById("status-indicator");
            switch (type){
                case "standby": {
                    element.children[0].innerHTML = "Standby";
                    element.style.backgroundColor = "green";
                    break;
                }
                case "running": {
                    element.children[0].innerHTML = "Running";
                    element.style.backgroundColor = "orange";
                    break;
                }
                case "error": {
                    element.children[0].innerHTML = "Error";
                    element.style.backgroundColor = "red";
                    break;  
                }
            }
        }

        function setMainPopup(messageType, message){
            const popup = document.getElementById("mainPopup")

            

            if(popup.innerHTML != ("<p> "+message+" </p>")){
                if(message!=""){
                    document.getElementById("MAIN").classList.add("disabled");
                }
                popup.innerHTML = "<p> "+message+" </p>";
                popup.classList = messageType;
            }
        }

        function resetMainPopup(){
            const popup = document.getElementById("mainPopup")

            document.getElementById("MAIN").classList.remove("disabled");

            popup.classList = "";
        }
        
    </script>
    <script src="JS/apiUpdateWorker.js"></script>
    <script src="JS/moduleApiUpdateWorker.js"></script>
</body>
</html>